
MotorAn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fa4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b8  0800a1b8  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1b8  0800a1b8  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1b8  0800a1b8  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800a1c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dbc  2000010c  0800a2cc  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec8  0800a2cc  00021ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018158  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b1d  00000000  00000000  000382d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  0003bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010aa  00000000  00000000  0003d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b89  00000000  00000000  0003e48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a14f  00000000  00000000  00063013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da2a2  00000000  00000000  0007d162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b48  00000000  00000000  00157404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000010c 	.word	0x2000010c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800a118 	.word	0x0800a118

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000110 	.word	0x20000110
 80001c8:	0800a118 	.word	0x0800a118

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fc09 	bl	80009e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f84e 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f9e4 	bl	80005a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 f9c4 	bl	8000568 <MX_DMA_Init>
  MX_ADC1_Init();
 80001e0:	f000 f8aa 	bl	8000338 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f009 f9a2 	bl	800952c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80001e8:	f000 f96a 	bl	80004c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Start ADC and DMA in circular mode */
       HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, ADC_BUFFER_SIZE);
 80001ec:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80001f0:	491a      	ldr	r1, [pc, #104]	; (800025c <main+0x90>)
 80001f2:	481b      	ldr	r0, [pc, #108]	; (8000260 <main+0x94>)
 80001f4:	f000 ff9a 	bl	800112c <HAL_ADC_Start_DMA>

       /* Start Timer to trigger ADC */
       HAL_TIM_Base_Start(&htim1);
 80001f8:	481a      	ldr	r0, [pc, #104]	; (8000264 <main+0x98>)
 80001fa:	f005 f8d1 	bl	80053a0 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  if (dmaHalfComplete)
 80001fe:	4b1a      	ldr	r3, [pc, #104]	; (8000268 <main+0x9c>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	b2db      	uxtb	r3, r3
 8000204:	2b00      	cmp	r3, #0
 8000206:	d010      	beq.n	800022a <main+0x5e>
	      {
	          dmaHalfComplete = 0;
 8000208:	4b17      	ldr	r3, [pc, #92]	; (8000268 <main+0x9c>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
	          /* Copy first half of ADC buffer into USB buffer */
	          memcpy(usbBuffer, (uint8_t *)adcBuffer, USB_BUFFER_SIZE);
 800020e:	4a17      	ldr	r2, [pc, #92]	; (800026c <main+0xa0>)
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <main+0x90>)
 8000212:	4610      	mov	r0, r2
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800021a:	461a      	mov	r2, r3
 800021c:	f009 ff6e 	bl	800a0fc <memcpy>
	          ProcessUSBSend(usbBuffer, USB_BUFFER_SIZE);
 8000220:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000224:	4811      	ldr	r0, [pc, #68]	; (800026c <main+0xa0>)
 8000226:	f000 fa67 	bl	80006f8 <ProcessUSBSend>
	      }

	      if (dmaComplete)
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <main+0xa4>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	b2db      	uxtb	r3, r3
 8000230:	2b00      	cmp	r3, #0
 8000232:	d0e4      	beq.n	80001fe <main+0x32>
	      {
	          dmaComplete = 0;
 8000234:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <main+0xa4>)
 8000236:	2200      	movs	r2, #0
 8000238:	701a      	strb	r2, [r3, #0]
	          /* Copy second half of ADC buffer into USB buffer */
	          memcpy(usbBuffer, (uint8_t *)&adcBuffer[ADC_BUFFER_SIZE / 2], USB_BUFFER_SIZE);
 800023a:	4a0c      	ldr	r2, [pc, #48]	; (800026c <main+0xa0>)
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <main+0x90>)
 800023e:	4610      	mov	r0, r2
 8000240:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8000244:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000248:	4619      	mov	r1, r3
 800024a:	f009 ff57 	bl	800a0fc <memcpy>
	          ProcessUSBSend(usbBuffer, USB_BUFFER_SIZE);
 800024e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000252:	4806      	ldr	r0, [pc, #24]	; (800026c <main+0xa0>)
 8000254:	f000 fa50 	bl	80006f8 <ProcessUSBSend>
	  	  if (dmaHalfComplete)
 8000258:	e7d1      	b.n	80001fe <main+0x32>
 800025a:	bf00      	nop
 800025c:	20000220 	.word	0x20000220
 8000260:	20000128 	.word	0x20000128
 8000264:	200001d4 	.word	0x200001d4
 8000268:	20000d60 	.word	0x20000d60
 800026c:	200009a0 	.word	0x200009a0
 8000270:	20000d61 	.word	0x20000d61

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b096      	sub	sp, #88	; 0x58
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2244      	movs	r2, #68	; 0x44
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f009 ff0e 	bl	800a0a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000296:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029a:	f003 fecb 	bl	8004034 <HAL_PWREx_ControlVoltageScaling>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a4:	f000 fa56 	bl	8000754 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002a8:	f003 fea6 	bl	8003ff8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002ac:	4b21      	ldr	r3, [pc, #132]	; (8000334 <SystemClock_Config+0xc0>)
 80002ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002b2:	4a20      	ldr	r2, [pc, #128]	; (8000334 <SystemClock_Config+0xc0>)
 80002b4:	f023 0318 	bic.w	r3, r3, #24
 80002b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80002bc:	2314      	movs	r3, #20
 80002be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002c0:	2301      	movs	r3, #1
 80002c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002cc:	2360      	movs	r3, #96	; 0x60
 80002ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002d4:	2301      	movs	r3, #1
 80002d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002d8:	2301      	movs	r3, #1
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002dc:	2328      	movs	r3, #40	; 0x28
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002e0:	2307      	movs	r3, #7
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e4:	2302      	movs	r3, #2
 80002e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002e8:	2302      	movs	r3, #2
 80002ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	f107 0314 	add.w	r3, r7, #20
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 ff05 	bl	8004100 <HAL_RCC_OscConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80002fc:	f000 fa2a 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000300:	230f      	movs	r3, #15
 8000302:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000304:	2303      	movs	r3, #3
 8000306:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	2104      	movs	r1, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f004 fb05 	bl	8004928 <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000324:	f000 fa16 	bl	8000754 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000328:	f004 fee0 	bl	80050ec <HAL_RCCEx_EnableMSIPLLMode>
}
 800032c:	bf00      	nop
 800032e:	3758      	adds	r7, #88	; 0x58
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000

08000338 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033e:	463b      	mov	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
 800034c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800034e:	4b54      	ldr	r3, [pc, #336]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000350:	4a54      	ldr	r2, [pc, #336]	; (80004a4 <MX_ADC1_Init+0x16c>)
 8000352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000354:	4b52      	ldr	r3, [pc, #328]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000356:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800035a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800035c:	4b50      	ldr	r3, [pc, #320]	; (80004a0 <MX_ADC1_Init+0x168>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000362:	4b4f      	ldr	r3, [pc, #316]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000368:	4b4d      	ldr	r3, [pc, #308]	; (80004a0 <MX_ADC1_Init+0x168>)
 800036a:	2201      	movs	r2, #1
 800036c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800036e:	4b4c      	ldr	r3, [pc, #304]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000370:	2204      	movs	r2, #4
 8000372:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000374:	4b4a      	ldr	r3, [pc, #296]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000376:	2200      	movs	r2, #0
 8000378:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800037a:	4b49      	ldr	r3, [pc, #292]	; (80004a0 <MX_ADC1_Init+0x168>)
 800037c:	2200      	movs	r2, #0
 800037e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8000380:	4b47      	ldr	r3, [pc, #284]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000382:	2206      	movs	r2, #6
 8000384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000386:	4b46      	ldr	r3, [pc, #280]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000388:	2200      	movs	r2, #0
 800038a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800038e:	4b44      	ldr	r3, [pc, #272]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000390:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000396:	4b42      	ldr	r3, [pc, #264]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800039c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800039e:	4b40      	ldr	r3, [pc, #256]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a6:	4b3e      	ldr	r3, [pc, #248]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80003ac:	4b3c      	ldr	r3, [pc, #240]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 80003b4:	4b3a      	ldr	r3, [pc, #232]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 80003ba:	4b39      	ldr	r3, [pc, #228]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003bc:	2260      	movs	r2, #96	; 0x60
 80003be:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80003c6:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003cc:	4834      	ldr	r0, [pc, #208]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003ce:	f000 fd6b 	bl	8000ea8 <HAL_ADC_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80003d8:	f000 f9bc 	bl	8000754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <MX_ADC1_Init+0x170>)
 80003de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e0:	2306      	movs	r3, #6
 80003e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80003e4:	2303      	movs	r3, #3
 80003e6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003e8:	237f      	movs	r3, #127	; 0x7f
 80003ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ec:	2304      	movs	r3, #4
 80003ee:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f4:	463b      	mov	r3, r7
 80003f6:	4619      	mov	r1, r3
 80003f8:	4829      	ldr	r0, [pc, #164]	; (80004a0 <MX_ADC1_Init+0x168>)
 80003fa:	f000 ff1b 	bl	8001234 <HAL_ADC_ConfigChannel>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000404:	f000 f9a6 	bl	8000754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000408:	4b28      	ldr	r3, [pc, #160]	; (80004ac <MX_ADC1_Init+0x174>)
 800040a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800040c:	230c      	movs	r3, #12
 800040e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000410:	463b      	mov	r3, r7
 8000412:	4619      	mov	r1, r3
 8000414:	4822      	ldr	r0, [pc, #136]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000416:	f000 ff0d 	bl	8001234 <HAL_ADC_ConfigChannel>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000420:	f000 f998 	bl	8000754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_ADC1_Init+0x178>)
 8000426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000428:	2312      	movs	r3, #18
 800042a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042c:	463b      	mov	r3, r7
 800042e:	4619      	mov	r1, r3
 8000430:	481b      	ldr	r0, [pc, #108]	; (80004a0 <MX_ADC1_Init+0x168>)
 8000432:	f000 feff 	bl	8001234 <HAL_ADC_ConfigChannel>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800043c:	f000 f98a 	bl	8000754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_ADC1_Init+0x17c>)
 8000442:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000444:	2318      	movs	r3, #24
 8000446:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000448:	463b      	mov	r3, r7
 800044a:	4619      	mov	r1, r3
 800044c:	4814      	ldr	r0, [pc, #80]	; (80004a0 <MX_ADC1_Init+0x168>)
 800044e:	f000 fef1 	bl	8001234 <HAL_ADC_ConfigChannel>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8000458:	f000 f97c 	bl	8000754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MX_ADC1_Init+0x180>)
 800045e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000464:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000466:	463b      	mov	r3, r7
 8000468:	4619      	mov	r1, r3
 800046a:	480d      	ldr	r0, [pc, #52]	; (80004a0 <MX_ADC1_Init+0x168>)
 800046c:	f000 fee2 	bl	8001234 <HAL_ADC_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8000476:	f000 f96d 	bl	8000754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <MX_ADC1_Init+0x184>)
 800047c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800047e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000482:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000484:	463b      	mov	r3, r7
 8000486:	4619      	mov	r1, r3
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_ADC1_Init+0x168>)
 800048a:	f000 fed3 	bl	8001234 <HAL_ADC_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000494:	f000 f95e 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	3718      	adds	r7, #24
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000128 	.word	0x20000128
 80004a4:	50040000 	.word	0x50040000
 80004a8:	1d500080 	.word	0x1d500080
 80004ac:	21800100 	.word	0x21800100
 80004b0:	25b00200 	.word	0x25b00200
 80004b4:	2a000400 	.word	0x2a000400
 80004b8:	2e300800 	.word	0x2e300800
 80004bc:	32601000 	.word	0x32601000

080004c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <MX_TIM1_Init+0xa0>)
 80004e0:	4a20      	ldr	r2, [pc, #128]	; (8000564 <MX_TIM1_Init+0xa4>)
 80004e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e4:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_TIM1_Init+0xa0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_TIM1_Init+0xa0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6755;
 80004f0:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_TIM1_Init+0xa0>)
 80004f2:	f641 2263 	movw	r2, #6755	; 0x1a63
 80004f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_TIM1_Init+0xa0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fe:	4b18      	ldr	r3, [pc, #96]	; (8000560 <MX_TIM1_Init+0xa0>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_TIM1_Init+0xa0>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050a:	4815      	ldr	r0, [pc, #84]	; (8000560 <MX_TIM1_Init+0xa0>)
 800050c:	f004 fef0 	bl	80052f0 <HAL_TIM_Base_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000516:	f000 f91d 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	4619      	mov	r1, r3
 8000526:	480e      	ldr	r0, [pc, #56]	; (8000560 <MX_TIM1_Init+0xa0>)
 8000528:	f004 ff86 	bl	8005438 <HAL_TIM_ConfigClockSource>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000532:	f000 f90f 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000536:	2320      	movs	r3, #32
 8000538:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4619      	mov	r1, r3
 8000546:	4806      	ldr	r0, [pc, #24]	; (8000560 <MX_TIM1_Init+0xa0>)
 8000548:	f005 f94a 	bl	80057e0 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000552:	f000 f8ff 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	3720      	adds	r7, #32
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200001d4 	.word	0x200001d4
 8000564:	40012c00 	.word	0x40012c00

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_DMA_Init+0x38>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <MX_DMA_Init+0x38>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6493      	str	r3, [r2, #72]	; 0x48
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_DMA_Init+0x38>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	200b      	movs	r0, #11
 800058c:	f001 fc29 	bl	8001de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000590:	200b      	movs	r0, #11
 8000592:	f001 fc42 	bl	8001e1a <HAL_NVIC_EnableIRQ>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <MX_GPIO_Init+0xd8>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a2f      	ldr	r2, [pc, #188]	; (800067c <MX_GPIO_Init+0xd8>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <MX_GPIO_Init+0xd8>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <MX_GPIO_Init+0xd8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a29      	ldr	r2, [pc, #164]	; (800067c <MX_GPIO_Init+0xd8>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <MX_GPIO_Init+0xd8>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <MX_GPIO_Init+0xd8>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <MX_GPIO_Init+0xd8>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_GPIO_Init+0xd8>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f001 ff82 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|renum_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2188      	movs	r1, #136	; 0x88
 8000614:	481a      	ldr	r0, [pc, #104]	; (8000680 <MX_GPIO_Init+0xdc>)
 8000616:	f001 ff7d 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800061a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f001 fe03 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800063a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f001 fdf5 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin renum_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|renum_Pin;
 8000656:	2388      	movs	r3, #136	; 0x88
 8000658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	4619      	mov	r1, r3
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0xdc>)
 800066e:	f001 fde7 	bl	8002240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	48000400 	.word	0x48000400

08000684 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    dmaHalfComplete = 1;  // Set flag for half-complete
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000d60 	.word	0x20000d60

080006a4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
    dmaComplete = 1;  // Set flag for complete
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000d61 	.word	0x20000d61

080006c4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	// Check for Overrun Error
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	2b10      	cmp	r3, #16
 80006d8:	d108      	bne.n	80006ec <HAL_ADC_ErrorCallback+0x28>
    {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR); // Clear ADC overrun flag
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2210      	movs	r2, #16
 80006e0:	601a      	str	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); // Status LED
 80006e2:	2201      	movs	r2, #1
 80006e4:	2108      	movs	r1, #8
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <HAL_ADC_ErrorCallback+0x30>)
 80006e8:	f001 ff14 	bl	8002514 <HAL_GPIO_WritePin>
    }
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	48000400 	.word	0x48000400

080006f8 <ProcessUSBSend>:
}



void ProcessUSBSend(uint8_t *buffer, uint16_t size)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
	if (!buffer)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d105      	bne.n	8000716 <ProcessUSBSend+0x1e>
		    {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2108      	movs	r1, #8
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <ProcessUSBSend+0x58>)
 8000710:	f001 ff00 	bl	8002514 <HAL_GPIO_WritePin>
		        return;
 8000714:	e019      	b.n	800074a <ProcessUSBSend+0x52>
		    }

	uint32_t timeout = HAL_GetTick(); // Record time
 8000716:	f000 f9cf 	bl	8000ab8 <HAL_GetTick>
 800071a:	60f8      	str	r0, [r7, #12]

    while (CDC_Transmit_FS(buffer, size) != USBD_OK)
 800071c:	e00d      	b.n	800073a <ProcessUSBSend+0x42>
    {
    	if ((HAL_GetTick() - timeout) > USB_TRANSMIT_TIMEOUT) //Timeout indicator
 800071e:	f000 f9cb 	bl	8000ab8 <HAL_GetTick>
 8000722:	4602      	mov	r2, r0
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	2b32      	cmp	r3, #50	; 0x32
 800072a:	d906      	bls.n	800073a <ProcessUSBSend+0x42>
    	 	 {
    			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_3); //DEBUG LED
 800072c:	2108      	movs	r1, #8
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <ProcessUSBSend+0x58>)
 8000730:	f001 ff08 	bl	8002544 <HAL_GPIO_TogglePin>
    			HAL_Delay (100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f000 f9cb 	bl	8000ad0 <HAL_Delay>
    while (CDC_Transmit_FS(buffer, size) != USBD_OK)
 800073a:	887b      	ldrh	r3, [r7, #2]
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f008 ffb2 	bl	80096a8 <CDC_Transmit_FS>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1e9      	bne.n	800071e <ProcessUSBSend+0x26>
    	 	 }
    }
}
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	48000400 	.word	0x48000400

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6613      	str	r3, [r2, #96]	; 0x60
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6593      	str	r3, [r2, #88]	; 0x58
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09e      	sub	sp, #120	; 0x78
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f009 fc6b 	bl	800a0a4 <memset>
  if(hadc->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a34      	ldr	r2, [pc, #208]	; (80008a4 <HAL_ADC_MspInit+0xfc>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d160      	bne.n	800089a <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80007de:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80007e2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fa89 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f7ff ffae 	bl	8000754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <HAL_ADC_MspInit+0x100>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fc:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <HAL_ADC_MspInit+0x100>)
 80007fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <HAL_ADC_MspInit+0x100>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <HAL_ADC_MspInit+0x100>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a24      	ldr	r2, [pc, #144]	; (80008a8 <HAL_ADC_MspInit+0x100>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <HAL_ADC_MspInit+0x100>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000828:	23fc      	movs	r3, #252	; 0xfc
 800082a:	667b      	str	r3, [r7, #100]	; 0x64
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800082c:	230b      	movs	r3, #11
 800082e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f001 fcff 	bl	8002240 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <HAL_ADC_MspInit+0x108>)
 8000846:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_ADC_MspInit+0x104>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_ADC_MspInit+0x104>)
 800085c:	2280      	movs	r2, #128	; 0x80
 800085e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000866:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <HAL_ADC_MspInit+0x104>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000872:	2220      	movs	r2, #32
 8000874:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000878:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800087c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000880:	f001 fae6 	bl	8001e50 <HAL_DMA_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800088a:	f7ff ff63 	bl	8000754 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000892:	64da      	str	r2, [r3, #76]	; 0x4c
 8000894:	4a05      	ldr	r2, [pc, #20]	; (80008ac <HAL_ADC_MspInit+0x104>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800089a:	bf00      	nop
 800089c:	3778      	adds	r7, #120	; 0x78
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	50040000 	.word	0x50040000
 80008a8:	40021000 	.word	0x40021000
 80008ac:	2000018c 	.word	0x2000018c
 80008b0:	40020008 	.word	0x40020008

080008b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_TIM_Base_MspInit+0x38>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10b      	bne.n	80008de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_TIM_Base_MspInit+0x3c>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <HAL_TIM_Base_MspInit+0x3c>)
 80008cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d0:	6613      	str	r3, [r2, #96]	; 0x60
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_TIM_Base_MspInit+0x3c>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40012c00 	.word	0x40012c00
 80008f0:	40021000 	.word	0x40021000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 f8a6 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800094c:	4802      	ldr	r0, [pc, #8]	; (8000958 <DMA1_Channel1_IRQHandler+0x10>)
 800094e:	f001 fb97 	bl	8002080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000018c 	.word	0x2000018c

0800095c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <USB_IRQHandler+0x10>)
 8000962:	f001 ff28 	bl	80027b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200019c8 	.word	0x200019c8

08000970 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff ffea 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f009 fb77 	bl	800a0b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f7ff fc01 	bl	80001cc <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80009d8:	0800a1c0 	.word	0x0800a1c0
  ldr r2, =_sbss
 80009dc:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80009e0:	20001ec8 	.word	0x20001ec8

080009e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_IRQHandler>

080009e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f001 f9eb 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f80e 	bl	8000a18 <HAL_InitTick>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	e001      	b.n	8000a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a08:	f7ff feaa 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d023      	beq.n	8000a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_InitTick+0x70>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 f9f7 	bl	8001e36 <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10f      	bne.n	8000a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d809      	bhi.n	8000a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f001 f9c1 	bl	8001de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0x74>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e004      	b.n	8000a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e001      	b.n	8000a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000d64 	.word	0x20000d64

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000d64 	.word	0x20000d64

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_Delay+0x44>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008

08000b18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	609a      	str	r2, [r3, #8]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	609a      	str	r2, [r3, #8]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3360      	adds	r3, #96	; 0x60
 8000b92:	461a      	mov	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LL_ADC_SetOffset+0x44>)
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000bb8:	bf00      	nop
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	03fff000 	.word	0x03fff000

08000bc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3360      	adds	r3, #96	; 0x60
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3360      	adds	r3, #96	; 0x60
 8000c04:	461a      	mov	r2, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c1e:	bf00      	nop
 8000c20:	371c      	adds	r7, #28
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3330      	adds	r3, #48	; 0x30
 8000c60:	461a      	mov	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	4413      	add	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	211f      	movs	r1, #31
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	401a      	ands	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0e9b      	lsrs	r3, r3, #26
 8000c88:	f003 011f 	and.w	r1, r3, #31
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	fa01 f303 	lsl.w	r3, r1, r3
 8000c96:	431a      	orrs	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c9c:	bf00      	nop
 8000c9e:	371c      	adds	r7, #28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3314      	adds	r3, #20
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	0e5b      	lsrs	r3, r3, #25
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	f003 0304 	and.w	r3, r3, #4
 8000cc4:	4413      	add	r3, r2
 8000cc6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	0d1b      	lsrs	r3, r3, #20
 8000cd0:	f003 031f 	and.w	r3, r3, #31
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	401a      	ands	r2, r3
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	0d1b      	lsrs	r3, r3, #20
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0318 	and.w	r3, r3, #24
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d24:	40d9      	lsrs	r1, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	400b      	ands	r3, r1
 8000d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	0007ffff 	.word	0x0007ffff

08000d48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6093      	str	r3, [r2, #8]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d80:	d101      	bne.n	8000d86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000da8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dd0:	d101      	bne.n	8000dd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d101      	bne.n	8000e24 <LL_ADC_IsEnabled+0x18>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <LL_ADC_IsEnabled+0x1a>
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e46:	f043 0204 	orr.w	r2, r3, #4
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d101      	bne.n	8000e72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d101      	bne.n	8000e98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e126      	b.n	8001110 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d109      	bne.n	8000ee4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fc69 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff3f 	bl	8000d6c <LL_ADC_IsDeepPowerDownEnabled>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff25 	bl	8000d48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff5a 	bl	8000dbc <LL_ADC_IsInternalRegulatorEnabled>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d115      	bne.n	8000f3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff3e 	bl	8000d94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f18:	4b7f      	ldr	r3, [pc, #508]	; (8001118 <HAL_ADC_Init+0x270>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	099b      	lsrs	r3, r3, #6
 8000f1e:	4a7f      	ldr	r2, [pc, #508]	; (800111c <HAL_ADC_Init+0x274>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	099b      	lsrs	r3, r3, #6
 8000f26:	3301      	adds	r3, #1
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f2c:	e002      	b.n	8000f34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f9      	bne.n	8000f2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff3c 	bl	8000dbc <LL_ADC_IsInternalRegulatorEnabled>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10d      	bne.n	8000f66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4e:	f043 0210 	orr.w	r2, r3, #16
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f043 0201 	orr.w	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff75 	bl	8000e5a <LL_ADC_REG_IsConversionOngoing>
 8000f70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 80bf 	bne.w	80010fe <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f040 80bb 	bne.w	80010fe <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f90:	f043 0202 	orr.w	r2, r3, #2
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff35 	bl	8000e0c <LL_ADC_IsEnabled>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000fa8:	485d      	ldr	r0, [pc, #372]	; (8001120 <HAL_ADC_Init+0x278>)
 8000faa:	f7ff ff2f 	bl	8000e0c <LL_ADC_IsEnabled>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d105      	bne.n	8000fc0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	485a      	ldr	r0, [pc, #360]	; (8001124 <HAL_ADC_Init+0x27c>)
 8000fbc:	f7ff fdac 	bl	8000b18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e5b      	ldrb	r3, [r3, #25]
 8000fc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000fd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000fd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d106      	bne.n	8000ffc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	045b      	lsls	r3, r3, #17
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001000:	2b00      	cmp	r3, #0
 8001002:	d009      	beq.n	8001018 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	4b42      	ldr	r3, [pc, #264]	; (8001128 <HAL_ADC_Init+0x280>)
 8001020:	4013      	ands	r3, r2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	430b      	orrs	r3, r1
 800102a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff25 	bl	8000e80 <LL_ADC_INJ_IsConversionOngoing>
 8001036:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d13d      	bne.n	80010ba <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d13a      	bne.n	80010ba <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001048:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001050:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001060:	f023 0302 	bic.w	r3, r3, #2
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	69b9      	ldr	r1, [r7, #24]
 800106a:	430b      	orrs	r3, r1
 800106c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001074:	2b01      	cmp	r3, #1
 8001076:	d118      	bne.n	80010aa <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001082:	f023 0304 	bic.w	r3, r3, #4
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800108e:	4311      	orrs	r1, r2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001094:	4311      	orrs	r1, r2
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800109a:	430a      	orrs	r2, r1
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	e007      	b.n	80010ba <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10c      	bne.n	80010dc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f023 010f 	bic.w	r1, r3, #15
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	631a      	str	r2, [r3, #48]	; 0x30
 80010da:	e007      	b.n	80010ec <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 020f 	bic.w	r2, r2, #15
 80010ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f0:	f023 0303 	bic.w	r3, r3, #3
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
 80010fc:	e007      	b.n	800110e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001102:	f043 0210 	orr.w	r2, r3, #16
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800110e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000000 	.word	0x20000000
 800111c:	053e2d63 	.word	0x053e2d63
 8001120:	50040000 	.word	0x50040000
 8001124:	50040300 	.word	0x50040300
 8001128:	fff0c007 	.word	0xfff0c007

0800112c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe8c 	bl	8000e5a <LL_ADC_REG_IsConversionOngoing>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d167      	bne.n	8001218 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800114e:	2b01      	cmp	r3, #1
 8001150:	d101      	bne.n	8001156 <HAL_ADC_Start_DMA+0x2a>
 8001152:	2302      	movs	r3, #2
 8001154:	e063      	b.n	800121e <HAL_ADC_Start_DMA+0xf2>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 fc4a 	bl	80019f8 <ADC_Enable>
 8001164:	4603      	mov	r3, r0
 8001166:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d14f      	bne.n	800120e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001172:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001192:	f023 0206 	bic.w	r2, r3, #6
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	659a      	str	r2, [r3, #88]	; 0x58
 800119a:	e002      	b.n	80011a2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a20      	ldr	r2, [pc, #128]	; (8001228 <HAL_ADC_Start_DMA+0xfc>)
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a1f      	ldr	r2, [pc, #124]	; (800122c <HAL_ADC_Start_DMA+0x100>)
 80011b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_ADC_Start_DMA+0x104>)
 80011b8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	221c      	movs	r2, #28
 80011c0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0210 	orr.w	r2, r2, #16
 80011d8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0201 	orr.w	r2, r2, #1
 80011e8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3340      	adds	r3, #64	; 0x40
 80011f4:	4619      	mov	r1, r3
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f000 fee1 	bl	8001fc0 <HAL_DMA_Start_IT>
 80011fe:	4603      	mov	r3, r0
 8001200:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe13 	bl	8000e32 <LL_ADC_REG_StartConversion>
 800120c:	e006      	b.n	800121c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001216:	e001      	b.n	800121c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001218:	2302      	movs	r3, #2
 800121a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800121c:	7dfb      	ldrb	r3, [r7, #23]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	08001b05 	.word	0x08001b05
 800122c:	08001bdd 	.word	0x08001bdd
 8001230:	08001bf9 	.word	0x08001bf9

08001234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0b6      	sub	sp, #216	; 0xd8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADC_ConfigChannel+0x22>
 8001252:	2302      	movs	r3, #2
 8001254:	e3bb      	b.n	80019ce <HAL_ADC_ConfigChannel+0x79a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fdf9 	bl	8000e5a <LL_ADC_REG_IsConversionOngoing>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 83a0 	bne.w	80019b0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d824      	bhi.n	80012ca <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	3b02      	subs	r3, #2
 8001286:	2b03      	cmp	r3, #3
 8001288:	d81b      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0x8e>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HAL_ADC_ConfigChannel+0x5c>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a9 	.word	0x080012a9
 8001298:	080012b1 	.word	0x080012b1
 800129c:	080012b9 	.word	0x080012b9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80012a0:	230c      	movs	r3, #12
 80012a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012a6:	e010      	b.n	80012ca <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80012a8:	2312      	movs	r3, #18
 80012aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012ae:	e00c      	b.n	80012ca <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80012b0:	2318      	movs	r3, #24
 80012b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012b6:	e008      	b.n	80012ca <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80012b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012c0:	e003      	b.n	80012ca <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80012c2:	2306      	movs	r3, #6
 80012c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80012c8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80012d8:	f7ff fcba 	bl	8000c50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fdba 	bl	8000e5a <LL_ADC_REG_IsConversionOngoing>
 80012e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fdc6 	bl	8000e80 <LL_ADC_INJ_IsConversionOngoing>
 80012f4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f040 81a4 	bne.w	800164a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 819f 	bne.w	800164a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6819      	ldr	r1, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	461a      	mov	r2, r3
 800131a:	f7ff fcc5 	bl	8000ca8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d00a      	beq.n	8001356 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6919      	ldr	r1, [r3, #16]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001350:	f7ff fc16 	bl	8000b80 <LL_ADC_SetOffset>
 8001354:	e179      	b.n	800164a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fc33 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10a      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x14e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fc28 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	0e9b      	lsrs	r3, r3, #26
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	e01e      	b.n	80013c0 <HAL_ADC_ConfigChannel+0x18c>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fc1d 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80013a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80013a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80013b0:	2320      	movs	r3, #32
 80013b2:	e004      	b.n	80013be <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80013b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1a4>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0e9b      	lsrs	r3, r3, #26
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	e018      	b.n	800140a <HAL_ADC_ConfigChannel+0x1d6>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80013ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80013f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80013fc:	2320      	movs	r3, #32
 80013fe:	e004      	b.n	800140a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001400:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800140a:	429a      	cmp	r2, r3
 800140c:	d106      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fbec 	bl	8000bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fbd0 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10a      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x214>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2101      	movs	r1, #1
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fbc5 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 800143e:	4603      	mov	r3, r0
 8001440:	0e9b      	lsrs	r3, r3, #26
 8001442:	f003 021f 	and.w	r2, r3, #31
 8001446:	e01e      	b.n	8001486 <HAL_ADC_ConfigChannel+0x252>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbba 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800145e:	fa93 f3a3 	rbit	r3, r3
 8001462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001466:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800146a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800146e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001476:	2320      	movs	r3, #32
 8001478:	e004      	b.n	8001484 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800147a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800147e:	fab3 f383 	clz	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <HAL_ADC_ConfigChannel+0x26a>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0e9b      	lsrs	r3, r3, #26
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	e018      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x29c>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80014b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80014ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80014c2:	2320      	movs	r3, #32
 80014c4:	e004      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80014c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d106      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	2101      	movs	r1, #1
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fb89 	bl	8000bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2102      	movs	r1, #2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fb6d 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10a      	bne.n	800150e <HAL_ADC_ConfigChannel+0x2da>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fb62 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	0e9b      	lsrs	r3, r3, #26
 8001508:	f003 021f 	and.w	r2, r3, #31
 800150c:	e01e      	b.n	800154c <HAL_ADC_ConfigChannel+0x318>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2102      	movs	r1, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fb57 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800152c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800153c:	2320      	movs	r3, #32
 800153e:	e004      	b.n	800154a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001554:	2b00      	cmp	r3, #0
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x330>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0e9b      	lsrs	r3, r3, #26
 800155e:	f003 031f 	and.w	r3, r3, #31
 8001562:	e014      	b.n	800158e <HAL_ADC_ConfigChannel+0x35a>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800156c:	fa93 f3a3 	rbit	r3, r3
 8001570:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001580:	2320      	movs	r3, #32
 8001582:	e004      	b.n	800158e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001588:	fab3 f383 	clz	r3, r3
 800158c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800158e:	429a      	cmp	r2, r3
 8001590:	d106      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2200      	movs	r2, #0
 8001598:	2102      	movs	r1, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb2a 	bl	8000bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2103      	movs	r1, #3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb0e 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10a      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x398>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2103      	movs	r1, #3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb03 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	0e9b      	lsrs	r3, r3, #26
 80015c6:	f003 021f 	and.w	r2, r3, #31
 80015ca:	e017      	b.n	80015fc <HAL_ADC_ConfigChannel+0x3c8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2103      	movs	r1, #3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff faf8 	bl	8000bc8 <LL_ADC_GetOffsetChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80015e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015e6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80015e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80015ee:	2320      	movs	r3, #32
 80015f0:	e003      	b.n	80015fa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80015f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x3e0>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0e9b      	lsrs	r3, r3, #26
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	e011      	b.n	8001638 <HAL_ADC_ConfigChannel+0x404>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001624:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800162c:	2320      	movs	r3, #32
 800162e:	e003      	b.n	8001638 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001638:	429a      	cmp	r2, r3
 800163a:	d106      	bne.n	800164a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	2103      	movs	r1, #3
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fad5 	bl	8000bf4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fbdc 	bl	8000e0c <LL_ADC_IsEnabled>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 8140 	bne.w	80018dc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	461a      	mov	r2, r3
 800166a:	f7ff fb49 	bl	8000d00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	4a8f      	ldr	r2, [pc, #572]	; (80018b0 <HAL_ADC_ConfigChannel+0x67c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	f040 8131 	bne.w	80018dc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10b      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x46e>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0e9b      	lsrs	r3, r3, #26
 8001690:	3301      	adds	r3, #1
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	2b09      	cmp	r3, #9
 8001698:	bf94      	ite	ls
 800169a:	2301      	movls	r3, #1
 800169c:	2300      	movhi	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	e019      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x4a2>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80016b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80016b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80016ba:	2320      	movs	r3, #32
 80016bc:	e003      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80016be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	bf94      	ite	ls
 80016d0:	2301      	movls	r3, #1
 80016d2:	2300      	movhi	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d079      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d107      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x4c2>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0e9b      	lsrs	r3, r3, #26
 80016ec:	3301      	adds	r3, #1
 80016ee:	069b      	lsls	r3, r3, #26
 80016f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016f4:	e015      	b.n	8001722 <HAL_ADC_ConfigChannel+0x4ee>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800170e:	2320      	movs	r3, #32
 8001710:	e003      	b.n	800171a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001714:	fab3 f383 	clz	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	069b      	lsls	r3, r3, #26
 800171e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x50e>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0e9b      	lsrs	r3, r3, #26
 8001734:	3301      	adds	r3, #1
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	e017      	b.n	8001772 <HAL_ADC_ConfigChannel+0x53e>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001752:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e003      	b.n	8001766 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800175e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	ea42 0103 	orr.w	r1, r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10a      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x564>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	0e9b      	lsrs	r3, r3, #26
 8001788:	3301      	adds	r3, #1
 800178a:	f003 021f 	and.w	r2, r3, #31
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	051b      	lsls	r3, r3, #20
 8001796:	e018      	b.n	80017ca <HAL_ADC_ConfigChannel+0x596>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80017a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80017aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80017b0:	2320      	movs	r3, #32
 80017b2:	e003      	b.n	80017bc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80017b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	f003 021f 	and.w	r2, r3, #31
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80017ca:	430b      	orrs	r3, r1
 80017cc:	e081      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d107      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x5b6>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	0e9b      	lsrs	r3, r3, #26
 80017e0:	3301      	adds	r3, #1
 80017e2:	069b      	lsls	r3, r3, #26
 80017e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017e8:	e015      	b.n	8001816 <HAL_ADC_ConfigChannel+0x5e2>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001802:	2320      	movs	r3, #32
 8001804:	e003      	b.n	800180e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	3301      	adds	r3, #1
 8001810:	069b      	lsls	r3, r3, #26
 8001812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x602>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	0e9b      	lsrs	r3, r3, #26
 8001828:	3301      	adds	r3, #1
 800182a:	f003 031f 	and.w	r3, r3, #31
 800182e:	2101      	movs	r1, #1
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	e017      	b.n	8001866 <HAL_ADC_ConfigChannel+0x632>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	61bb      	str	r3, [r7, #24]
  return result;
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800184e:	2320      	movs	r3, #32
 8001850:	e003      	b.n	800185a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2101      	movs	r1, #1
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	ea42 0103 	orr.w	r1, r2, r3
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10d      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x65e>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0e9b      	lsrs	r3, r3, #26
 800187c:	3301      	adds	r3, #1
 800187e:	f003 021f 	and.w	r2, r3, #31
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	3b1e      	subs	r3, #30
 800188a:	051b      	lsls	r3, r3, #20
 800188c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001890:	e01e      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x69c>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	60fb      	str	r3, [r7, #12]
  return result;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d104      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80018aa:	2320      	movs	r3, #32
 80018ac:	e006      	b.n	80018bc <HAL_ADC_ConfigChannel+0x688>
 80018ae:	bf00      	nop
 80018b0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	f003 021f 	and.w	r2, r3, #31
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	3b1e      	subs	r3, #30
 80018ca:	051b      	lsls	r3, r3, #20
 80018cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f9e6 	bl	8000ca8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <HAL_ADC_ConfigChannel+0x7a4>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d06c      	beq.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018e8:	483c      	ldr	r0, [pc, #240]	; (80019dc <HAL_ADC_ConfigChannel+0x7a8>)
 80018ea:	f7ff f93b 	bl	8000b64 <LL_ADC_GetCommonPathInternalCh>
 80018ee:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a3a      	ldr	r2, [pc, #232]	; (80019e0 <HAL_ADC_ConfigChannel+0x7ac>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d127      	bne.n	800194c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d121      	bne.n	800194c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a35      	ldr	r2, [pc, #212]	; (80019e4 <HAL_ADC_ConfigChannel+0x7b0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d157      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001916:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800191a:	4619      	mov	r1, r3
 800191c:	482f      	ldr	r0, [pc, #188]	; (80019dc <HAL_ADC_ConfigChannel+0x7a8>)
 800191e:	f7ff f90e 	bl	8000b3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001922:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <HAL_ADC_ConfigChannel+0x7b4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	099b      	lsrs	r3, r3, #6
 8001928:	4a30      	ldr	r2, [pc, #192]	; (80019ec <HAL_ADC_ConfigChannel+0x7b8>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800193c:	e002      	b.n	8001944 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3b01      	subs	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800194a:	e03a      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d113      	bne.n	800197e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001956:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800195a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10d      	bne.n	800197e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1f      	ldr	r2, [pc, #124]	; (80019e4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d12a      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800196c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001974:	4619      	mov	r1, r3
 8001976:	4819      	ldr	r0, [pc, #100]	; (80019dc <HAL_ADC_ConfigChannel+0x7a8>)
 8001978:	f7ff f8e1 	bl	8000b3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800197c:	e021      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d11c      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001988:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800198c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d116      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_ADC_ConfigChannel+0x7b0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d111      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800199e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <HAL_ADC_ConfigChannel+0x7a8>)
 80019aa:	f7ff f8c8 	bl	8000b3e <LL_ADC_SetCommonPathInternalCh>
 80019ae:	e008      	b.n	80019c2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 0220 	orr.w	r2, r3, #32
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	37d8      	adds	r7, #216	; 0xd8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	80080000 	.word	0x80080000
 80019dc:	50040300 	.word	0x50040300
 80019e0:	c7520000 	.word	0xc7520000
 80019e4:	50040000 	.word	0x50040000
 80019e8:	20000000 	.word	0x20000000
 80019ec:	053e2d63 	.word	0x053e2d63
 80019f0:	cb840000 	.word	0xcb840000
 80019f4:	80000001 	.word	0x80000001

080019f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f9ff 	bl	8000e0c <LL_ADC_IsEnabled>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d169      	bne.n	8001ae8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <ADC_Enable+0xfc>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e055      	b.n	8001aea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f9ce 	bl	8000de4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001a48:	482b      	ldr	r0, [pc, #172]	; (8001af8 <ADC_Enable+0x100>)
 8001a4a:	f7ff f88b 	bl	8000b64 <LL_ADC_GetCommonPathInternalCh>
 8001a4e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <ADC_Enable+0x104>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <ADC_Enable+0x108>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a72:	e002      	b.n	8001a7a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f9      	bne.n	8001a74 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001a80:	f7ff f81a 	bl	8000ab8 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a86:	e028      	b.n	8001ada <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f9bd 	bl	8000e0c <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff f9a1 	bl	8000de4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aa2:	f7ff f809 	bl	8000ab8 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d914      	bls.n	8001ada <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d00d      	beq.n	8001ada <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f043 0210 	orr.w	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	f043 0201 	orr.w	r2, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e007      	b.n	8001aea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d1cf      	bne.n	8001a88 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	8000003f 	.word	0x8000003f
 8001af8:	50040300 	.word	0x50040300
 8001afc:	20000000 	.word	0x20000000
 8001b00:	053e2d63 	.word	0x053e2d63

08001b04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d14b      	bne.n	8001bb6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d021      	beq.n	8001b7c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff f874 	bl	8000c2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d032      	beq.n	8001bae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d12b      	bne.n	8001bae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11f      	bne.n	8001bae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	655a      	str	r2, [r3, #84]	; 0x54
 8001b7a:	e018      	b.n	8001bae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d111      	bne.n	8001bae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7fe fd78 	bl	80006a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001bb4:	e00e      	b.n	8001bd4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7fe fd7e 	bl	80006c4 <HAL_ADC_ErrorCallback>
}
 8001bc8:	e004      	b.n	8001bd4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7fe fd4a 	bl	8000684 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f043 0204 	orr.w	r2, r3, #4
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f7fe fd50 	bl	80006c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <__NVIC_EnableIRQ+0x38>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff29 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df4:	f7ff ff3e 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ff8e 	bl	8001d20 <NVIC_EncodePriority>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5d 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff31 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffa2 	bl	8001d88 <SysTick_Config>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e098      	b.n	8001f94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_DMA_Init+0x150>)
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d80f      	bhi.n	8001e8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <HAL_DMA_Init+0x154>)
 8001e76:	4413      	add	r3, r2
 8001e78:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_DMA_Init+0x158>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	009a      	lsls	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_DMA_Init+0x15c>)
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e8c:	e00e      	b.n	8001eac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_DMA_Init+0x160>)
 8001e96:	4413      	add	r3, r2
 8001e98:	4a43      	ldr	r2, [pc, #268]	; (8001fa8 <HAL_DMA_Init+0x158>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	009a      	lsls	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a42      	ldr	r2, [pc, #264]	; (8001fb4 <HAL_DMA_Init+0x164>)
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f06:	d039      	beq.n	8001f7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_DMA_Init+0x15c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11a      	bne.n	8001f48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f12:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_DMA_Init+0x168>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 031c 	and.w	r3, r3, #28
 8001f1e:	210f      	movs	r1, #15
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4924      	ldr	r1, [pc, #144]	; (8001fb8 <HAL_DMA_Init+0x168>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_DMA_Init+0x168>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	f003 031c 	and.w	r3, r3, #28
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	491d      	ldr	r1, [pc, #116]	; (8001fb8 <HAL_DMA_Init+0x168>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
 8001f46:	e019      	b.n	8001f7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_DMA_Init+0x16c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f003 031c 	and.w	r3, r3, #28
 8001f54:	210f      	movs	r1, #15
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	4917      	ldr	r1, [pc, #92]	; (8001fbc <HAL_DMA_Init+0x16c>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_DMA_Init+0x16c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f003 031c 	and.w	r3, r3, #28
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	4911      	ldr	r1, [pc, #68]	; (8001fbc <HAL_DMA_Init+0x16c>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40020407 	.word	0x40020407
 8001fa4:	bffdfff8 	.word	0xbffdfff8
 8001fa8:	cccccccd 	.word	0xcccccccd
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	bffdfbf8 	.word	0xbffdfbf8
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	400200a8 	.word	0x400200a8
 8001fbc:	400204a8 	.word	0x400204a8

08001fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_DMA_Start_IT+0x20>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e04b      	b.n	8002078 <HAL_DMA_Start_IT+0xb8>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d13a      	bne.n	800206a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f8e0 	bl	80021de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 020e 	orr.w	r2, r2, #14
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e00f      	b.n	8002058 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0204 	bic.w	r2, r2, #4
 8002046:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 020a 	orr.w	r2, r2, #10
 8002056:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e005      	b.n	8002076 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002076:	7dfb      	ldrb	r3, [r7, #23]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f003 031c 	and.w	r3, r3, #28
 80020a0:	2204      	movs	r2, #4
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d026      	beq.n	80020fa <HAL_DMA_IRQHandler+0x7a>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d021      	beq.n	80020fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f003 021c 	and.w	r2, r3, #28
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2104      	movs	r1, #4
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d071      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020f8:	e06c      	b.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f003 031c 	and.w	r3, r3, #28
 8002102:	2202      	movs	r2, #2
 8002104:	409a      	lsls	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02e      	beq.n	800216c <HAL_DMA_IRQHandler+0xec>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d029      	beq.n	800216c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 020a 	bic.w	r2, r2, #10
 8002134:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f003 021c 	and.w	r2, r3, #28
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2102      	movs	r1, #2
 800214c:	fa01 f202 	lsl.w	r2, r1, r2
 8002150:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d038      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800216a:	e033      	b.n	80021d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 031c 	and.w	r3, r3, #28
 8002174:	2208      	movs	r2, #8
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02a      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d025      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 020e 	bic.w	r2, r2, #14
 8002198:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 021c 	and.w	r2, r3, #28
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
}
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021de:	b480      	push	{r7}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f003 021c 	and.w	r2, r3, #28
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b10      	cmp	r3, #16
 800220e:	d108      	bne.n	8002222 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002220:	e007      	b.n	8002232 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	60da      	str	r2, [r3, #12]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e148      	b.n	80024e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 813a 	beq.w	80024dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d005      	beq.n	8002280 <HAL_GPIO_Init+0x40>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d130      	bne.n	80022e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0201 	and.w	r2, r3, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d017      	beq.n	800231e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d123      	bne.n	8002372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8094 	beq.w	80024dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b4:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b8:	4a51      	ldr	r2, [pc, #324]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6613      	str	r3, [r2, #96]	; 0x60
 80023c0:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023cc:	4a4d      	ldr	r2, [pc, #308]	; (8002504 <HAL_GPIO_Init+0x2c4>)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_Init+0x1d4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a43      	ldr	r2, [pc, #268]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x1d0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a42      	ldr	r2, [pc, #264]	; (800250c <HAL_GPIO_Init+0x2cc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_Init+0x1cc>
 8002408:	2302      	movs	r3, #2
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 800240c:	2307      	movs	r3, #7
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x1d6>
 8002414:	2300      	movs	r3, #0
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002426:	4937      	ldr	r1, [pc, #220]	; (8002504 <HAL_GPIO_Init+0x2c4>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002458:	4a2d      	ldr	r2, [pc, #180]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ac:	4a18      	ldr	r2, [pc, #96]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d6:	4a0e      	ldr	r2, [pc, #56]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f47f aeaf 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	48000400 	.word	0x48000400
 800250c:	48000800 	.word	0x48000800
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43d9      	mvns	r1, r3
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	400b      	ands	r3, r1
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0ef      	b.n	800276a <HAL_PCD_Init+0x1f2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f007 f9dc 	bl	800995c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f003 f99d 	bl	80058f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c6:	f003 f971 	bl	80058ac <USB_CoreInit>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0c6      	b.n	800276a <HAL_PCD_Init+0x1f2>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 f9a2 	bl	800592c <USB_SetCurrentMode>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0b7      	b.n	800276a <HAL_PCD_Init+0x1f2>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e03e      	b.n	800267e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	440b      	add	r3, r1
 800260e:	3311      	adds	r3, #17
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	3310      	adds	r3, #16
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	3313      	adds	r3, #19
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	3320      	adds	r3, #32
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	3324      	adds	r3, #36	; 0x24
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	3301      	adds	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	791b      	ldrb	r3, [r3, #4]
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	429a      	cmp	r2, r3
 8002686:	d3bb      	bcc.n	8002600 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e044      	b.n	8002718 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	f203 1351 	addw	r3, r3, #337	; 0x151
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	440b      	add	r3, r1
 80026b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3301      	adds	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	429a      	cmp	r2, r3
 8002720:	d3b5      	bcc.n	800268e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272c:	f003 f90b 	bl	8005946 <USB_DevInit>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e013      	b.n	800276a <HAL_PCD_Init+0x1f2>
  }

  hpcd->USB_Address = 0U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7adb      	ldrb	r3, [r3, #11]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d102      	bne.n	800275e <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 fc22 	bl	8003fa2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f004 feb7 	bl	80074d6 <USB_DevDisconnect>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_PCD_Start+0x16>
 8002784:	2302      	movs	r3, #2
 8002786:	e012      	b.n	80027ae <HAL_PCD_Start+0x3c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 f897 	bl	80058c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 fe82 	bl	80074a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fe9c 	bl	8007500 <USB_ReadInterrupts>
 80027c8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fb14 	bl	8002e02 <PCD_EP_ISR_Handler>

    return;
 80027da:	e110      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d013      	beq.n	800280e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	b292      	uxth	r2, r2
 80027fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f007 f94d 	bl	8009a9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002804:	2100      	movs	r1, #0
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8fc 	bl	8002a04 <HAL_PCD_SetAddress>

    return;
 800280c:	e0f7      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00c      	beq.n	8002832 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800282a:	b292      	uxth	r2, r2
 800282c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002830:	e0e5      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002844:	b29a      	uxth	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800284e:	b292      	uxth	r2, r2
 8002850:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002854:	e0d3      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d034      	beq.n	80028ca <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	b292      	uxth	r2, r2
 8002874:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002880:	b29a      	uxth	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0208 	bic.w	r2, r2, #8
 800288a:	b292      	uxth	r2, r2
 800288c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028a2:	2100      	movs	r1, #0
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f007 fba9 	bl	8009ffc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f007 f930 	bl	8009b10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028c2:	b292      	uxth	r2, r2
 80028c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80028c8:	e099      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d027      	beq.n	8002924 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028dc:	b29a      	uxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0208 	orr.w	r2, r2, #8
 80028e6:	b292      	uxth	r2, r2
 80028e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fe:	b292      	uxth	r2, r2
 8002900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0204 	orr.w	r2, r2, #4
 8002916:	b292      	uxth	r2, r2
 8002918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f007 f8dd 	bl	8009adc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002922:	e06c      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002936:	b29a      	uxth	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002940:	b292      	uxth	r2, r2
 8002942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d12b      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0204 	orr.w	r2, r2, #4
 8002962:	b292      	uxth	r2, r2
 8002964:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0208 	orr.w	r2, r2, #8
 800297a:	b292      	uxth	r2, r2
 800297c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002990:	b29b      	uxth	r3, r3
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800299e:	2101      	movs	r1, #1
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f007 fb2b 	bl	8009ffc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80029a6:	e02a      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f007 f897 	bl	8009adc <HAL_PCD_SuspendCallback>
    return;
 80029ae:	e026      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00f      	beq.n	80029da <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029cc:	b292      	uxth	r2, r2
 80029ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f007 f855 	bl	8009a82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029d8:	e011      	b.n	80029fe <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f6:	b292      	uxth	r2, r2
 80029f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80029fc:	bf00      	nop
  }
}
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_PCD_SetAddress+0x1a>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e012      	b.n	8002a44 <HAL_PCD_SetAddress+0x40>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fd23 	bl	8007480 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	70fb      	strb	r3, [r7, #3]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	803b      	strh	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da0e      	bge.n	8002a90 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 0207 	and.w	r2, r3, #7
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	3310      	adds	r3, #16
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	705a      	strb	r2, [r3, #1]
 8002a8e:	e00e      	b.n	8002aae <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	f003 0207 	and.w	r2, r3, #7
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002aba:	883b      	ldrh	r3, [r7, #0]
 8002abc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	78ba      	ldrb	r2, [r7, #2]
 8002ac8:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002aca:	78bb      	ldrb	r3, [r7, #2]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d102      	bne.n	8002ad6 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_PCD_EP_Open+0x98>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e00e      	b.n	8002b02 <HAL_PCD_EP_Open+0xb6>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68f9      	ldr	r1, [r7, #12]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 ff46 	bl	8005984 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8002b00:	7afb      	ldrb	r3, [r7, #11]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	da0e      	bge.n	8002b3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	f003 0207 	and.w	r2, r3, #7
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	3310      	adds	r3, #16
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	705a      	strb	r2, [r3, #1]
 8002b3a:	e00e      	b.n	8002b5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 0207 	and.w	r2, r3, #7
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b5a:	78fb      	ldrb	r3, [r7, #3]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_EP_Close+0x6a>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e00e      	b.n	8002b92 <HAL_PCD_EP_Close+0x88>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 fbe6 	bl	8006354 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b086      	sub	sp, #24
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	f003 0207 	and.w	r2, r3, #7
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6979      	ldr	r1, [r7, #20]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f003 fd9e 	bl	800672e <USB_EPStartXfer>

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 0207 	and.w	r2, r3, #7
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
 8002c3e:	f003 0207 	and.w	r2, r3, #7
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	3310      	adds	r3, #16
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2201      	movs	r2, #1
 8002c76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6979      	ldr	r1, [r7, #20]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f003 fd4f 	bl	800672e <USB_EPStartXfer>

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	7912      	ldrb	r2, [r2, #4]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e04c      	b.n	8002d52 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	da0e      	bge.n	8002cde <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc0:	78fb      	ldrb	r3, [r7, #3]
 8002cc2:	f003 0207 	and.w	r2, r3, #7
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	3310      	adds	r3, #16
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	705a      	strb	r2, [r3, #1]
 8002cdc:	e00c      	b.n	8002cf8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_PCD_EP_SetStall+0x7e>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e01c      	b.n	8002d52 <HAL_PCD_EP_SetStall+0xb8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68f9      	ldr	r1, [r7, #12]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fab0 	bl	800728c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f004 fbec 	bl	8007520 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	7912      	ldrb	r2, [r2, #4]
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e040      	b.n	8002dfa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da0e      	bge.n	8002d9e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 0207 	and.w	r2, r3, #7
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	3310      	adds	r3, #16
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	705a      	strb	r2, [r3, #1]
 8002d9c:	e00e      	b.n	8002dbc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	f003 0207 	and.w	r2, r3, #7
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_PCD_EP_ClrStall+0x82>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e00e      	b.n	8002dfa <HAL_PCD_EP_ClrStall+0xa0>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 fa9f 	bl	800732e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b092      	sub	sp, #72	; 0x48
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e0a:	e334      	b.n	8003476 <PCD_EP_ISR_Handler+0x674>
  {
    wIstr = hpcd->Instance->ISTR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e14:	877b      	strh	r3, [r7, #58]	; 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002e16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

    if (epindex == 0U)
 8002e22:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 8109 	bne.w	800303e <PCD_EP_ISR_Handler+0x23c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14d      	bne.n	8002ed2 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	813b      	strh	r3, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3310      	adds	r3, #16
 8002e5e:	643b      	str	r3, [r7, #64]	; 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	441a      	add	r2, r3
 8002e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e96:	2100      	movs	r1, #0
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f006 fdd8 	bl	8009a4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7b5b      	ldrb	r3, [r3, #13]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 82e6 	beq.w	8003476 <PCD_EP_ISR_Handler+0x674>
 8002eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 82e1 	bne.w	8003476 <PCD_EP_ISR_Handler+0x674>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	7b5b      	ldrb	r3, [r3, #13]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	735a      	strb	r2, [r3, #13]
 8002ed0:	e2d1      	b.n	8003476 <PCD_EP_ISR_Handler+0x674>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ed8:	643b      	str	r3, [r7, #64]	; 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	86fb      	strh	r3, [r7, #54]	; 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d032      	beq.n	8002f52 <PCD_EP_ISR_Handler+0x150>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f12:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f20:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f24:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f004 fb48 	bl	80075bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f38:	4013      	ands	r3, r2
 8002f3a:	817b      	strh	r3, [r7, #10]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	897a      	ldrh	r2, [r7, #10]
 8002f42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f46:	b292      	uxth	r2, r2
 8002f48:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f006 fd52 	bl	80099f4 <HAL_PCD_SetupStageCallback>
 8002f50:	e291      	b.n	8003476 <PCD_EP_ISR_Handler+0x674>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f52:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f280 828d 	bge.w	8003476 <PCD_EP_ISR_Handler+0x674>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f68:	4013      	ands	r3, r2
 8002f6a:	81fb      	strh	r3, [r7, #14]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	89fa      	ldrh	r2, [r7, #14]
 8002f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f76:	b292      	uxth	r2, r2
 8002f78:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d019      	beq.n	8002fde <PCD_EP_ISR_Handler+0x1dc>
 8002faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d015      	beq.n	8002fde <PCD_EP_ISR_Handler+0x1dc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb8:	6959      	ldr	r1, [r3, #20]
 8002fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fbc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f004 fafa 	bl	80075bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	441a      	add	r2, r3
 8002fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f006 fd1d 	bl	8009a18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fe6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 8242 	bne.w	8003476 <PCD_EP_ISR_Handler+0x674>
 8002ff2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ff4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ff8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ffc:	f000 823b 	beq.w	8003476 <PCD_EP_ISR_Handler+0x674>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800300c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003010:	81bb      	strh	r3, [r7, #12]
 8003012:	89bb      	ldrh	r3, [r7, #12]
 8003014:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003018:	81bb      	strh	r3, [r7, #12]
 800301a:	89bb      	ldrh	r3, [r7, #12]
 800301c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003020:	81bb      	strh	r3, [r7, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	89bb      	ldrh	r3, [r7, #12]
 8003028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800302c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003038:	b29b      	uxth	r3, r3
 800303a:	8013      	strh	r3, [r2, #0]
 800303c:	e21b      	b.n	8003476 <PCD_EP_ISR_Handler+0x674>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	86fb      	strh	r3, [r7, #54]	; 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003050:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003054:	2b00      	cmp	r3, #0
 8003056:	f280 80f1 	bge.w	800323c <PCD_EP_ISR_Handler+0x43a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29a      	uxth	r2, r3
 800306c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003070:	4013      	ands	r3, r2
 8003072:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003084:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003088:	b292      	uxth	r2, r2
 800308a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800308c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	7b1b      	ldrb	r3, [r3, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d123      	bne.n	80030f2 <PCD_EP_ISR_Handler+0x2f0>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

          if (count != 0U)
 80030d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 808b 	beq.w	80031f2 <PCD_EP_ISR_Handler+0x3f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e2:	6959      	ldr	r1, [r3, #20]
 80030e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e6:	88da      	ldrh	r2, [r3, #6]
 80030e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80030ec:	f004 fa66 	bl	80075bc <USB_ReadPMA>
 80030f0:	e07f      	b.n	80031f2 <PCD_EP_ISR_Handler+0x3f0>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80030f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f4:	78db      	ldrb	r3, [r3, #3]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d109      	bne.n	800310e <PCD_EP_ISR_Handler+0x30c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80030fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80030fc:	461a      	mov	r2, r3
 80030fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f9c6 	bl	8003492 <HAL_PCD_EP_DB_Receive>
 8003106:	4603      	mov	r3, r0
 8003108:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800310c:	e071      	b.n	80031f2 <PCD_EP_ISR_Handler+0x3f0>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003128:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	441a      	add	r2, r3
 8003138:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800313a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800313e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800314a:	b29b      	uxth	r3, r3
 800314c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d022      	beq.n	80031ae <PCD_EP_ISR_Handler+0x3ac>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	4413      	add	r3, r2
 8003182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

              if (count != 0U)
 8003190:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02c      	beq.n	80031f2 <PCD_EP_ISR_Handler+0x3f0>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319e:	6959      	ldr	r1, [r3, #20]
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	891a      	ldrh	r2, [r3, #8]
 80031a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031a8:	f004 fa08 	bl	80075bc <USB_ReadPMA>
 80031ac:	e021      	b.n	80031f2 <PCD_EP_ISR_Handler+0x3f0>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

              if (count != 0U)
 80031d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <PCD_EP_ISR_Handler+0x3f0>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	6959      	ldr	r1, [r3, #20]
 80031e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e8:	895a      	ldrh	r2, [r3, #10]
 80031ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031ee:	f004 f9e5 	bl	80075bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80031f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031fa:	441a      	add	r2, r3
 80031fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003208:	441a      	add	r2, r3
 800320a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800320e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <PCD_EP_ISR_Handler+0x420>
 8003216:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800321a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	429a      	cmp	r2, r3
 8003220:	d206      	bcs.n	8003230 <PCD_EP_ISR_Handler+0x42e>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f006 fbf5 	bl	8009a18 <HAL_PCD_DataOutStageCallback>
 800322e:	e005      	b.n	800323c <PCD_EP_ISR_Handler+0x43a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003236:	4618      	mov	r0, r3
 8003238:	f003 fa79 	bl	800672e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800323c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8117 	beq.w	8003476 <PCD_EP_ISR_Handler+0x674>
      {
        ep = &hpcd->IN_ep[epindex];
 8003248:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	3310      	adds	r3, #16
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	643b      	str	r3, [r7, #64]	; 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003296:	78db      	ldrb	r3, [r3, #3]
 8003298:	2b01      	cmp	r3, #1
 800329a:	f040 80a1 	bne.w	80033e0 <PCD_EP_ISR_Handler+0x5de>
        {
          ep->xfer_len = 0U;
 800329e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	7b1b      	ldrb	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 8092 	beq.w	80033d2 <PCD_EP_ISR_Handler+0x5d0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d046      	beq.n	8003346 <PCD_EP_ISR_Handler+0x544>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ba:	785b      	ldrb	r3, [r3, #1]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d126      	bne.n	800330e <PCD_EP_ISR_Handler+0x50c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4413      	add	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	00da      	lsls	r2, r3, #3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4413      	add	r3, r2
 80032e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003306:	b29a      	uxth	r2, r3
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	801a      	strh	r2, [r3, #0]
 800330c:	e061      	b.n	80033d2 <PCD_EP_ISR_Handler+0x5d0>
 800330e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d15d      	bne.n	80033d2 <PCD_EP_ISR_Handler+0x5d0>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003324:	b29b      	uxth	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	4413      	add	r3, r2
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	00da      	lsls	r2, r3, #3
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2200      	movs	r2, #0
 8003342:	801a      	strh	r2, [r3, #0]
 8003344:	e045      	b.n	80033d2 <PCD_EP_ISR_Handler+0x5d0>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d126      	bne.n	80033a2 <PCD_EP_ISR_Handler+0x5a0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003362:	b29b      	uxth	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	4413      	add	r3, r2
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
 800336c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	00da      	lsls	r2, r3, #3
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	4413      	add	r3, r2
 8003376:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	b29a      	uxth	r2, r3
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	801a      	strh	r2, [r3, #0]
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b29b      	uxth	r3, r3
 8003392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339a:	b29a      	uxth	r2, r3
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	801a      	strh	r2, [r3, #0]
 80033a0:	e017      	b.n	80033d2 <PCD_EP_ISR_Handler+0x5d0>
 80033a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a4:	785b      	ldrb	r3, [r3, #1]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d113      	bne.n	80033d2 <PCD_EP_ISR_Handler+0x5d0>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	4413      	add	r3, r2
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	00da      	lsls	r2, r3, #3
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	4413      	add	r3, r2
 80033c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	2200      	movs	r2, #0
 80033d0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f006 fb38 	bl	8009a4e <HAL_PCD_DataInStageCallback>
 80033de:	e04a      	b.n	8003476 <PCD_EP_ISR_Handler+0x674>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80033e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d13f      	bne.n	800346a <PCD_EP_ISR_Handler+0x668>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	4413      	add	r3, r2
 8003404:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340e:	867b      	strh	r3, [r7, #50]	; 0x32

            if (ep->xfer_len > TxPctSize)
 8003410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003416:	429a      	cmp	r2, r3
 8003418:	d906      	bls.n	8003428 <PCD_EP_ISR_Handler+0x626>
            {
              ep->xfer_len -= TxPctSize;
 800341a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003420:	1ad2      	subs	r2, r2, r3
 8003422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003424:	619a      	str	r2, [r3, #24]
 8003426:	e002      	b.n	800342e <PCD_EP_ISR_Handler+0x62c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800342e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <PCD_EP_ISR_Handler+0x642>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f006 fb06 	bl	8009a4e <HAL_PCD_DataInStageCallback>
 8003442:	e018      	b.n	8003476 <PCD_EP_ISR_Handler+0x674>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800344a:	441a      	add	r2, r3
 800344c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003456:	441a      	add	r2, r3
 8003458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003462:	4618      	mov	r0, r3
 8003464:	f003 f963 	bl	800672e <USB_EPStartXfer>
 8003468:	e005      	b.n	8003476 <PCD_EP_ISR_Handler+0x674>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800346a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800346c:	461a      	mov	r2, r3
 800346e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f917 	bl	80036a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800347e:	b29b      	uxth	r3, r3
 8003480:	b21b      	sxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f6ff acc2 	blt.w	8002e0c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3748      	adds	r7, #72	; 0x48
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	4613      	mov	r3, r2
 800349e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d07c      	beq.n	80035a4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	699a      	ldr	r2, [r3, #24]
 80034d4:	8b7b      	ldrh	r3, [r7, #26]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d306      	bcc.n	80034e8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	8b7b      	ldrh	r3, [r7, #26]
 80034e0:	1ad2      	subs	r2, r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	619a      	str	r2, [r3, #24]
 80034e6:	e002      	b.n	80034ee <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d123      	bne.n	800353e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003510:	833b      	strh	r3, [r7, #24]
 8003512:	8b3b      	ldrh	r3, [r7, #24]
 8003514:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003518:	833b      	strh	r3, [r7, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	8b3b      	ldrh	r3, [r7, #24]
 800352a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353a:	b29b      	uxth	r3, r3
 800353c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01f      	beq.n	8003588 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	82fb      	strh	r3, [r7, #22]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	441a      	add	r2, r3
 8003572:	8afb      	ldrh	r3, [r7, #22]
 8003574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003580:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003584:	b29b      	uxth	r3, r3
 8003586:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003588:	8b7b      	ldrh	r3, [r7, #26]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 8085 	beq.w	800369a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6959      	ldr	r1, [r3, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	891a      	ldrh	r2, [r3, #8]
 800359c:	8b7b      	ldrh	r3, [r7, #26]
 800359e:	f004 f80d 	bl	80075bc <USB_ReadPMA>
 80035a2:	e07a      	b.n	800369a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	8b7b      	ldrh	r3, [r7, #26]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d306      	bcc.n	80035e2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	8b7b      	ldrh	r3, [r7, #26]
 80035da:	1ad2      	subs	r2, r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	619a      	str	r2, [r3, #24]
 80035e0:	e002      	b.n	80035e8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d123      	bne.n	8003638 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	83fb      	strh	r3, [r7, #30]
 800360c:	8bfb      	ldrh	r3, [r7, #30]
 800360e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003612:	83fb      	strh	r3, [r7, #30]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	441a      	add	r2, r3
 8003622:	8bfb      	ldrh	r3, [r7, #30]
 8003624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800362c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003634:	b29b      	uxth	r3, r3
 8003636:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d11f      	bne.n	8003682 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	83bb      	strh	r3, [r7, #28]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	441a      	add	r2, r3
 800366c:	8bbb      	ldrh	r3, [r7, #28]
 800366e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800367e:	b29b      	uxth	r3, r3
 8003680:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003682:	8b7b      	ldrh	r3, [r7, #26]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6818      	ldr	r0, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6959      	ldr	r1, [r3, #20]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	895a      	ldrh	r2, [r3, #10]
 8003694:	8b7b      	ldrh	r3, [r7, #26]
 8003696:	f003 ff91 	bl	80075bc <USB_ReadPMA>
    }
  }

  return count;
 800369a:	8b7b      	ldrh	r3, [r7, #26]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b0a6      	sub	sp, #152	; 0x98
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 81f7 	beq.w	8003aac <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    if (ep->xfer_len > TxPctSize)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d907      	bls.n	8003702 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80036fa:	1ad2      	subs	r2, r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	619a      	str	r2, [r3, #24]
 8003700:	e002      	b.n	8003708 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 80e1 	bne.w	80038d4 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d126      	bne.n	8003768 <HAL_PCD_EP_DB_Transmit+0xc4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003728:	b29b      	uxth	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	4413      	add	r3, r2
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	00da      	lsls	r2, r3, #3
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	4413      	add	r3, r2
 800373c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374c:	b29a      	uxth	r2, r3
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003760:	b29a      	uxth	r2, r3
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	e01a      	b.n	800379e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	785b      	ldrb	r3, [r3, #1]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d116      	bne.n	800379e <HAL_PCD_EP_DB_Transmit+0xfa>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	4413      	add	r3, r2
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	00da      	lsls	r2, r3, #3
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	4413      	add	r3, r2
 8003792:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003796:	637b      	str	r3, [r7, #52]	; 0x34
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	2200      	movs	r2, #0
 800379c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d126      	bne.n	80037fa <HAL_PCD_EP_DB_Transmit+0x156>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	4413      	add	r3, r2
 80037c2:	623b      	str	r3, [r7, #32]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	00da      	lsls	r2, r3, #3
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	4413      	add	r3, r2
 80037ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037de:	b29a      	uxth	r2, r3
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	e017      	b.n	800382a <HAL_PCD_EP_DB_Transmit+0x186>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	785b      	ldrb	r3, [r3, #1]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d113      	bne.n	800382a <HAL_PCD_EP_DB_Transmit+0x186>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380a:	b29b      	uxth	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	4413      	add	r3, r2
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00da      	lsls	r2, r3, #3
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	4413      	add	r3, r2
 800381e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	2200      	movs	r2, #0
 8003828:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	78db      	ldrb	r3, [r3, #3]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d123      	bne.n	800387a <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800384c:	837b      	strh	r3, [r7, #26]
 800384e:	8b7b      	ldrh	r3, [r7, #26]
 8003850:	f083 0320 	eor.w	r3, r3, #32
 8003854:	837b      	strh	r3, [r7, #26]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	441a      	add	r2, r3
 8003864:	8b7b      	ldrh	r3, [r7, #26]
 8003866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800386a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800386e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003876:	b29b      	uxth	r3, r3
 8003878:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	4619      	mov	r1, r3
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f006 f8e4 	bl	8009a4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01f      	beq.n	80038d0 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	833b      	strh	r3, [r7, #24]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	8b3b      	ldrh	r3, [r7, #24]
 80038bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e31f      	b.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d021      	beq.n	8003922 <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	441a      	add	r2, r3
 800390a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800390e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	b29b      	uxth	r3, r3
 8003920:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003928:	2b01      	cmp	r3, #1
 800392a:	f040 82ca 	bne.w	8003ec2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003936:	441a      	add	r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003944:	441a      	add	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	429a      	cmp	r2, r3
 8003954:	d309      	bcc.n	800396a <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	65bb      	str	r3, [r7, #88]	; 0x58
          ep->xfer_len_db -= len;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	621a      	str	r2, [r3, #32]
 8003968:	e015      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d107      	bne.n	8003982 <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003972:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003976:	65bb      	str	r3, [r7, #88]	; 0x58
          ep->xfer_fill_db = 0U;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003980:	e009      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	65bb      	str	r3, [r7, #88]	; 0x58
          ep->xfer_len_db = 0U;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	785b      	ldrb	r3, [r3, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d15f      	bne.n	8003a5e <HAL_PCD_EP_DB_Transmit+0x3ba>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	643b      	str	r3, [r7, #64]	; 0x40
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b2:	4413      	add	r3, r2
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	00da      	lsls	r2, r3, #3
 80039bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039be:	4413      	add	r3, r2
 80039c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <HAL_PCD_EP_DB_Transmit+0x34e>
 80039dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	801a      	strh	r2, [r3, #0]
 80039f0:	e051      	b.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80039f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f4:	2b3e      	cmp	r3, #62	; 0x3e
 80039f6:	d816      	bhi.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x382>
 80039f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	653b      	str	r3, [r7, #80]	; 0x50
 80039fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x36a>
 8003a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8003a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a22:	801a      	strh	r2, [r3, #0]
 8003a24:	e037      	b.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2e:	f003 031f 	and.w	r3, r3, #31
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <HAL_PCD_EP_DB_Transmit+0x398>
 8003a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	029b      	lsls	r3, r3, #10
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	e01b      	b.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	785b      	ldrb	r3, [r3, #1]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d117      	bne.n	8003a96 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7a:	4413      	add	r3, r2
 8003a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	00da      	lsls	r2, r3, #3
 8003a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a86:	4413      	add	r3, r2
 8003a88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a94:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	6959      	ldr	r1, [r3, #20]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	891a      	ldrh	r2, [r3, #8]
 8003aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f003 fd47 	bl	8007538 <USB_WritePMA>
 8003aaa:	e20a      	b.n	8003ec2 <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

    if (ep->xfer_len >= TxPctSize)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d307      	bcc.n	8003af0 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	699a      	ldr	r2, [r3, #24]
 8003ae4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003ae8:	1ad2      	subs	r2, r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	619a      	str	r2, [r3, #24]
 8003aee:	e002      	b.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f040 80f6 	bne.w	8003cec <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d126      	bne.n	8003b56 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b1c:	4413      	add	r3, r2
 8003b1e:	677b      	str	r3, [r7, #116]	; 0x74
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	00da      	lsls	r2, r3, #3
 8003b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b28:	4413      	add	r3, r2
 8003b2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	e01a      	b.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	785b      	ldrb	r3, [r3, #1]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d116      	bne.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b72:	4413      	add	r3, r2
 8003b74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	00da      	lsls	r2, r3, #3
 8003b7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b7e:	4413      	add	r3, r2
 8003b80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b88:	2200      	movs	r2, #0
 8003b8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d12f      	bne.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x558>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	00da      	lsls	r2, r3, #3
 8003bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	e01c      	b.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x592>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d118      	bne.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x592>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c14:	4413      	add	r3, r2
 8003c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	00da      	lsls	r2, r3, #3
 8003c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c24:	4413      	add	r3, r2
 8003c26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c32:	2200      	movs	r2, #0
 8003c34:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	78db      	ldrb	r3, [r3, #3]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d127      	bne.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c58:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003c5c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003c60:	f083 0320 	eor.w	r3, r3, #32
 8003c64:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8003c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	4619      	mov	r1, r3
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f005 feda 	bl	8009a4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d121      	bne.n	8003ce8 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e113      	b.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d121      	bne.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 80be 	bne.w	8003ec2 <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003d4e:	441a      	add	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003d5c:	441a      	add	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	6a1a      	ldr	r2, [r3, #32]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d309      	bcc.n	8003d82 <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	65bb      	str	r3, [r7, #88]	; 0x58
          ep->xfer_len_db -= len;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d7a:	1ad2      	subs	r2, r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	621a      	str	r2, [r3, #32]
 8003d80:	e015      	b.n	8003dae <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003d8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003d8e:	65bb      	str	r3, [r7, #88]	; 0x58
          ep->xfer_fill_db = 0U;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d98:	e009      	b.n	8003dae <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	65bb      	str	r3, [r7, #88]	; 0x58
          ep->xfer_len_db = 0U;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d15f      	bne.n	8003e7c <HAL_PCD_EP_DB_Transmit+0x7d8>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dd0:	4413      	add	r3, r2
 8003dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	00da      	lsls	r2, r3, #3
 8003dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ddc:	4413      	add	r3, r2
 8003dde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003de2:	667b      	str	r3, [r7, #100]	; 0x64
 8003de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x76c>
 8003dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e0c:	801a      	strh	r2, [r3, #0]
 8003e0e:	e04e      	b.n	8003eae <HAL_PCD_EP_DB_Transmit+0x80a>
 8003e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e12:	2b3e      	cmp	r3, #62	; 0x3e
 8003e14:	d816      	bhi.n	8003e44 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8003e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x788>
 8003e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e28:	3301      	adds	r3, #1
 8003e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	029b      	lsls	r3, r3, #10
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e40:	801a      	strh	r2, [r3, #0]
 8003e42:	e034      	b.n	8003eae <HAL_PCD_EP_DB_Transmit+0x80a>
 8003e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	663b      	str	r3, [r7, #96]	; 0x60
 8003e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e56:	3b01      	subs	r3, #1
 8003e58:	663b      	str	r3, [r7, #96]	; 0x60
 8003e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	029b      	lsls	r3, r3, #10
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e018      	b.n	8003eae <HAL_PCD_EP_DB_Transmit+0x80a>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d114      	bne.n	8003eae <HAL_PCD_EP_DB_Transmit+0x80a>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e92:	4413      	add	r3, r2
 8003e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	00da      	lsls	r2, r3, #3
 8003e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6959      	ldr	r1, [r3, #20]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	895a      	ldrh	r2, [r3, #10]
 8003eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f003 fb3b 	bl	8007538 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003edc:	82fb      	strh	r3, [r7, #22]
 8003ede:	8afb      	ldrh	r3, [r7, #22]
 8003ee0:	f083 0310 	eor.w	r3, r3, #16
 8003ee4:	82fb      	strh	r3, [r7, #22]
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	f083 0320 	eor.w	r3, r3, #32
 8003eec:	82fb      	strh	r3, [r7, #22]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	8afb      	ldrh	r3, [r7, #22]
 8003efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3798      	adds	r7, #152	; 0x98
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f2e:	897b      	ldrh	r3, [r7, #10]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	f003 0207 	and.w	r2, r3, #7
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	3310      	adds	r3, #16
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e009      	b.n	8003f66 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f52:	897a      	ldrh	r2, [r7, #10]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f66:	893b      	ldrh	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d107      	bne.n	8003f7c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	80da      	strh	r2, [r3, #6]
 8003f7a:	e00b      	b.n	8003f94 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
  hpcd->LPM_State = LPM_L0;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40007000 	.word	0x40007000

08004018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_PWREx_GetVoltageRange+0x18>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40007000 	.word	0x40007000

08004034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004042:	d130      	bne.n	80040a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800404c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004050:	d038      	beq.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800405a:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800405c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2232      	movs	r2, #50	; 0x32
 8004068:	fb02 f303 	mul.w	r3, r2, r3
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0c9b      	lsrs	r3, r3, #18
 8004074:	3301      	adds	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004078:	e002      	b.n	8004080 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b01      	subs	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800408c:	d102      	bne.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x60>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f2      	bne.n	800407a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a0:	d110      	bne.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e00f      	b.n	80040c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b2:	d007      	beq.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040bc:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40007000 	.word	0x40007000
 80040d8:	20000000 	.word	0x20000000
 80040dc:	431bde83 	.word	0x431bde83

080040e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a04      	ldr	r2, [pc, #16]	; (80040fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80040ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ee:	6053      	str	r3, [r2, #4]
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40007000 	.word	0x40007000

08004100 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d102      	bne.n	8004114 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f000 bc02 	b.w	8004918 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004114:	4b96      	ldr	r3, [pc, #600]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800411e:	4b94      	ldr	r3, [pc, #592]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80e4 	beq.w	80042fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_RCC_OscConfig+0x4c>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	f040 808b 	bne.w	800425a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b01      	cmp	r3, #1
 8004148:	f040 8087 	bne.w	800425a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800414c:	4b88      	ldr	r3, [pc, #544]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_OscConfig+0x64>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e3d9      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	4b81      	ldr	r3, [pc, #516]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <HAL_RCC_OscConfig+0x7e>
 8004174:	4b7e      	ldr	r3, [pc, #504]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417c:	e005      	b.n	800418a <HAL_RCC_OscConfig+0x8a>
 800417e:	4b7c      	ldr	r3, [pc, #496]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800418a:	4293      	cmp	r3, r2
 800418c:	d223      	bcs.n	80041d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fd54 	bl	8004c40 <RCC_SetFlashLatencyFromMSIRange>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e3ba      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a2:	4b73      	ldr	r3, [pc, #460]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a72      	ldr	r2, [pc, #456]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041a8:	f043 0308 	orr.w	r3, r3, #8
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b70      	ldr	r3, [pc, #448]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	496d      	ldr	r1, [pc, #436]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c0:	4b6b      	ldr	r3, [pc, #428]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	4968      	ldr	r1, [pc, #416]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
 80041d4:	e025      	b.n	8004222 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d6:	4b66      	ldr	r3, [pc, #408]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a65      	ldr	r2, [pc, #404]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4960      	ldr	r1, [pc, #384]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	495b      	ldr	r1, [pc, #364]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004204:	4313      	orrs	r3, r2
 8004206:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fd14 	bl	8004c40 <RCC_SetFlashLatencyFromMSIRange>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e37a      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004222:	f000 fc81 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004226:	4602      	mov	r2, r0
 8004228:	4b51      	ldr	r3, [pc, #324]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	4950      	ldr	r1, [pc, #320]	; (8004374 <HAL_RCC_OscConfig+0x274>)
 8004234:	5ccb      	ldrb	r3, [r1, r3]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	fa22 f303 	lsr.w	r3, r2, r3
 800423e:	4a4e      	ldr	r2, [pc, #312]	; (8004378 <HAL_RCC_OscConfig+0x278>)
 8004240:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004242:	4b4e      	ldr	r3, [pc, #312]	; (800437c <HAL_RCC_OscConfig+0x27c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc fbe6 	bl	8000a18 <HAL_InitTick>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d052      	beq.n	80042fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	e35e      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d032      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004262:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a42      	ldr	r2, [pc, #264]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800426e:	f7fc fc23 	bl	8000ab8 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004276:	f7fc fc1f 	bl	8000ab8 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e347      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004288:	4b39      	ldr	r3, [pc, #228]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a35      	ldr	r2, [pc, #212]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 800429a:	f043 0308 	orr.w	r3, r3, #8
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4930      	ldr	r1, [pc, #192]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b2:	4b2f      	ldr	r3, [pc, #188]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	492b      	ldr	r1, [pc, #172]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
 80042c6:	e01a      	b.n	80042fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a28      	ldr	r2, [pc, #160]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042d4:	f7fc fbf0 	bl	8000ab8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042dc:	f7fc fbec 	bl	8000ab8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e314      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1dc>
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d073      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b08      	cmp	r3, #8
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x21c>
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b0c      	cmp	r3, #12
 8004314:	d10e      	bne.n	8004334 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	4b14      	ldr	r3, [pc, #80]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d063      	beq.n	80043f0 <HAL_RCC_OscConfig+0x2f0>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d15f      	bne.n	80043f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e2f1      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x24c>
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e025      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004354:	d114      	bne.n	8004380 <HAL_RCC_OscConfig+0x280>
 8004356:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b03      	ldr	r3, [pc, #12]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a02      	ldr	r2, [pc, #8]	; (8004370 <HAL_RCC_OscConfig+0x270>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e013      	b.n	8004398 <HAL_RCC_OscConfig+0x298>
 8004370:	40021000 	.word	0x40021000
 8004374:	0800a178 	.word	0x0800a178
 8004378:	20000000 	.word	0x20000000
 800437c:	20000004 	.word	0x20000004
 8004380:	4ba0      	ldr	r3, [pc, #640]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a9f      	ldr	r2, [pc, #636]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b9d      	ldr	r3, [pc, #628]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a9c      	ldr	r2, [pc, #624]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fc fb8a 	bl	8000ab8 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fc fb86 	bl	8000ab8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	; 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e2ae      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ba:	4b92      	ldr	r3, [pc, #584]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x2a8>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fc fb76 	bl	8000ab8 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fc fb72 	bl	8000ab8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	; 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e29a      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043e2:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x2d0>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d060      	beq.n	80044c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b04      	cmp	r3, #4
 8004402:	d005      	beq.n	8004410 <HAL_RCC_OscConfig+0x310>
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d119      	bne.n	800443e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d116      	bne.n	800443e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004410:	4b7c      	ldr	r3, [pc, #496]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_OscConfig+0x328>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e277      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b76      	ldr	r3, [pc, #472]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	4973      	ldr	r1, [pc, #460]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443c:	e040      	b.n	80044c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d023      	beq.n	800448e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004446:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6e      	ldr	r2, [pc, #440]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fc fb31 	bl	8000ab8 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445a:	f7fc fb2d 	bl	8000ab8 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e255      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800446c:	4b65      	ldr	r3, [pc, #404]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004478:	4b62      	ldr	r3, [pc, #392]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	495f      	ldr	r1, [pc, #380]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
 800448c:	e018      	b.n	80044c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448e:	4b5d      	ldr	r3, [pc, #372]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a5c      	ldr	r2, [pc, #368]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fc fb0d 	bl	8000ab8 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fc fb09 	bl	8000ab8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e231      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d03c      	beq.n	8004546 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01c      	beq.n	800450e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d4:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044da:	4a4a      	ldr	r2, [pc, #296]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fc fae8 	bl	8000ab8 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ec:	f7fc fae4 	bl	8000ab8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e20c      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044fe:	4b41      	ldr	r3, [pc, #260]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0ef      	beq.n	80044ec <HAL_RCC_OscConfig+0x3ec>
 800450c:	e01b      	b.n	8004546 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800450e:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004514:	4a3b      	ldr	r2, [pc, #236]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fc facb 	bl	8000ab8 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004526:	f7fc fac7 	bl	8000ab8 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1ef      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800453a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ef      	bne.n	8004526 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80a6 	beq.w	80046a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004554:	2300      	movs	r3, #0
 8004556:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004558:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800455a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10d      	bne.n	8004580 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004564:	4b27      	ldr	r3, [pc, #156]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	4a26      	ldr	r2, [pc, #152]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800456e:	6593      	str	r3, [r2, #88]	; 0x58
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457c:	2301      	movs	r3, #1
 800457e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_RCC_OscConfig+0x508>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d118      	bne.n	80045be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458c:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <HAL_RCC_OscConfig+0x508>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <HAL_RCC_OscConfig+0x508>)
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004598:	f7fc fa8e 	bl	8000ab8 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a0:	f7fc fa8a 	bl	8000ab8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1b2      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <HAL_RCC_OscConfig+0x508>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d108      	bne.n	80045d8 <HAL_RCC_OscConfig+0x4d8>
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	4a0d      	ldr	r2, [pc, #52]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045d6:	e029      	b.n	800462c <HAL_RCC_OscConfig+0x52c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d115      	bne.n	800460c <HAL_RCC_OscConfig+0x50c>
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	4a07      	ldr	r2, [pc, #28]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80045e8:	f043 0304 	orr.w	r3, r3, #4
 80045ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f6:	4a03      	ldr	r2, [pc, #12]	; (8004604 <HAL_RCC_OscConfig+0x504>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004600:	e014      	b.n	800462c <HAL_RCC_OscConfig+0x52c>
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	40007000 	.word	0x40007000
 800460c:	4b9a      	ldr	r3, [pc, #616]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	4a99      	ldr	r2, [pc, #612]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800461c:	4b96      	ldr	r3, [pc, #600]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	4a95      	ldr	r2, [pc, #596]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d016      	beq.n	8004662 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fc fa40 	bl	8000ab8 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fc fa3c 	bl	8000ab8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e162      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004652:	4b89      	ldr	r3, [pc, #548]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ed      	beq.n	800463c <HAL_RCC_OscConfig+0x53c>
 8004660:	e015      	b.n	800468e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fc fa29 	bl	8000ab8 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004668:	e00a      	b.n	8004680 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fc fa25 	bl	8000ab8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	; 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e14b      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004680:	4b7d      	ldr	r3, [pc, #500]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ed      	bne.n	800466a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468e:	7ffb      	ldrb	r3, [r7, #31]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004694:	4b78      	ldr	r3, [pc, #480]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	4a77      	ldr	r2, [pc, #476]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 800469a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03c      	beq.n	8004726 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01c      	beq.n	80046ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046b4:	4b70      	ldr	r3, [pc, #448]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80046b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ba:	4a6f      	ldr	r2, [pc, #444]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fc f9f8 	bl	8000ab8 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046cc:	f7fc f9f4 	bl	8000ab8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e11c      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046de:	4b66      	ldr	r3, [pc, #408]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80046e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ef      	beq.n	80046cc <HAL_RCC_OscConfig+0x5cc>
 80046ec:	e01b      	b.n	8004726 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80046f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046f4:	4a60      	ldr	r2, [pc, #384]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fc f9db 	bl	8000ab8 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004706:	f7fc f9d7 	bl	8000ab8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0ff      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004718:	4b57      	ldr	r3, [pc, #348]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 800471a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ef      	bne.n	8004706 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80f3 	beq.w	8004916 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	2b02      	cmp	r3, #2
 8004736:	f040 80c9 	bne.w	80048cc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800473a:	4b4f      	ldr	r3, [pc, #316]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f003 0203 	and.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	429a      	cmp	r2, r3
 800474c:	d12c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	3b01      	subs	r3, #1
 800475a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800475c:	429a      	cmp	r2, r3
 800475e:	d123      	bne.n	80047a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d11b      	bne.n	80047a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d113      	bne.n	80047a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	3b01      	subs	r3, #1
 800478e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d109      	bne.n	80047a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	3b01      	subs	r3, #1
 80047a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d06b      	beq.n	8004880 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d062      	beq.n	8004874 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ae:	4b32      	ldr	r3, [pc, #200]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0ac      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047be:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80047c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047ca:	f7fc f975 	bl	8000ab8 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d2:	f7fc f971 	bl	8000ab8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e099      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f0      	bne.n	80047d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_RCC_OscConfig+0x77c>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004800:	3a01      	subs	r2, #1
 8004802:	0112      	lsls	r2, r2, #4
 8004804:	4311      	orrs	r1, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800480a:	0212      	lsls	r2, r2, #8
 800480c:	4311      	orrs	r1, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004812:	0852      	lsrs	r2, r2, #1
 8004814:	3a01      	subs	r2, #1
 8004816:	0552      	lsls	r2, r2, #21
 8004818:	4311      	orrs	r1, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800481e:	0852      	lsrs	r2, r2, #1
 8004820:	3a01      	subs	r2, #1
 8004822:	0652      	lsls	r2, r2, #25
 8004824:	4311      	orrs	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800482a:	06d2      	lsls	r2, r2, #27
 800482c:	430a      	orrs	r2, r1
 800482e:	4912      	ldr	r1, [pc, #72]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004830:	4313      	orrs	r3, r2
 8004832:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004834:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 800483a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800483e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a0c      	ldr	r2, [pc, #48]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800484c:	f7fc f934 	bl	8000ab8 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fc f930 	bl	8000ab8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e058      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_RCC_OscConfig+0x778>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004872:	e050      	b.n	8004916 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04f      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
 8004878:	40021000 	.word	0x40021000
 800487c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004880:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d144      	bne.n	8004916 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800488c:	4b24      	ldr	r3, [pc, #144]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a23      	ldr	r2, [pc, #140]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 8004892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004898:	4b21      	ldr	r3, [pc, #132]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a20      	ldr	r2, [pc, #128]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 800489e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048a4:	f7fc f908 	bl	8000ab8 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7fc f904 	bl	8000ab8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e02c      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048be:	4b18      	ldr	r3, [pc, #96]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x7ac>
 80048ca:	e024      	b.n	8004916 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d01f      	beq.n	8004912 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 80048d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7fc f8eb 	bl	8000ab8 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fc f8e7 	bl	8000ab8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e00f      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	4905      	ldr	r1, [pc, #20]	; (8004920 <HAL_RCC_OscConfig+0x820>)
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCC_OscConfig+0x824>)
 800490c:	4013      	ands	r3, r2
 800490e:	60cb      	str	r3, [r1, #12]
 8004910:	e001      	b.n	8004916 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	feeefffc 	.word	0xfeeefffc

08004928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0e7      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b75      	ldr	r3, [pc, #468]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d910      	bls.n	800496c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b72      	ldr	r3, [pc, #456]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 0207 	bic.w	r2, r3, #7
 8004952:	4970      	ldr	r1, [pc, #448]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b6e      	ldr	r3, [pc, #440]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0cf      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	4b66      	ldr	r3, [pc, #408]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004984:	429a      	cmp	r2, r3
 8004986:	d908      	bls.n	800499a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4960      	ldr	r1, [pc, #384]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d04c      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	4b5a      	ldr	r3, [pc, #360]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d121      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0a6      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c6:	4b54      	ldr	r3, [pc, #336]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d115      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e09a      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049de:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e08e      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ee:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e086      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049fe:	4b46      	ldr	r3, [pc, #280]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4943      	ldr	r1, [pc, #268]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fc f852 	bl	8000ab8 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fc f84e 	bl	8000ab8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e06e      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b3a      	ldr	r3, [pc, #232]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 020c 	and.w	r2, r3, #12
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1eb      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d208      	bcs.n	8004a6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a5c:	4b2e      	ldr	r3, [pc, #184]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	492b      	ldr	r1, [pc, #172]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6e:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d210      	bcs.n	8004a9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 0207 	bic.w	r2, r3, #7
 8004a84:	4923      	ldr	r1, [pc, #140]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e036      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	4918      	ldr	r1, [pc, #96]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac8:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4910      	ldr	r1, [pc, #64]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004adc:	f000 f824 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	490b      	ldr	r1, [pc, #44]	; (8004b1c <HAL_RCC_ClockConfig+0x1f4>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1f8>)
 8004afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_RCC_ClockConfig+0x1fc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fb ff89 	bl	8000a18 <HAL_InitTick>
 8004b06:	4603      	mov	r3, r0
 8004b08:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40022000 	.word	0x40022000
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	0800a178 	.word	0x0800a178
 8004b20:	20000000 	.word	0x20000000
 8004b24:	20000004 	.word	0x20000004

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	; 0x24
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b40:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d11e      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b84:	4a2b      	ldr	r2, [pc, #172]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ba0:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bac:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d134      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0xa6>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xac>
 8004bcc:	e005      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bce:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd0:	617b      	str	r3, [r7, #20]
      break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bd6:	617b      	str	r3, [r7, #20]
      break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	617b      	str	r3, [r7, #20]
      break;
 8004bde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004be0:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	3301      	adds	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	fb03 f202 	mul.w	r2, r3, r2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	0e5b      	lsrs	r3, r3, #25
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	3301      	adds	r3, #1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c20:	69bb      	ldr	r3, [r7, #24]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	; 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800a188 	.word	0x0800a188
 8004c38:	00f42400 	.word	0x00f42400
 8004c3c:	007a1200 	.word	0x007a1200

08004c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c58:	f7ff f9de 	bl	8004018 <HAL_PWREx_GetVoltageRange>
 8004c5c:	6178      	str	r0, [r7, #20]
 8004c5e:	e014      	b.n	8004c8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	4a24      	ldr	r2, [pc, #144]	; (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c6c:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c78:	f7ff f9ce 	bl	8004018 <HAL_PWREx_GetVoltageRange>
 8004c7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c90:	d10b      	bne.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d919      	bls.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2ba0      	cmp	r3, #160	; 0xa0
 8004c9c:	d902      	bls.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e013      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e010      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b80      	cmp	r3, #128	; 0x80
 8004cae:	d902      	bls.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e00a      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d102      	bne.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	e004      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b70      	cmp	r3, #112	; 0x70
 8004cc6:	d101      	bne.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cc8:	2301      	movs	r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 0207 	bic.w	r2, r3, #7
 8004cd4:	4909      	ldr	r1, [pc, #36]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40022000 	.word	0x40022000

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d08:	2300      	movs	r3, #0
 8004d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d031      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d24:	d01a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d2a:	d814      	bhi.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d34:	d10f      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d36:	4b5d      	ldr	r3, [pc, #372]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	4a5c      	ldr	r2, [pc, #368]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d42:	e00c      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f9de 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	74fb      	strb	r3, [r7, #19]
      break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d64:	4b51      	ldr	r3, [pc, #324]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	494e      	ldr	r1, [pc, #312]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d7a:	e001      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 809e 	beq.w	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d92:	4b46      	ldr	r3, [pc, #280]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004da2:	2300      	movs	r3, #0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da8:	4b40      	ldr	r3, [pc, #256]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	4a3f      	ldr	r2, [pc, #252]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db2:	6593      	str	r3, [r2, #88]	; 0x58
 8004db4:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc4:	4b3a      	ldr	r3, [pc, #232]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a39      	ldr	r2, [pc, #228]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004dd0:	f7fb fe72 	bl	8000ab8 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dd6:	e009      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd8:	f7fb fe6e 	bl	8000ab8 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d902      	bls.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	74fb      	strb	r3, [r7, #19]
        break;
 8004dea:	e005      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dec:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0ef      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d15a      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dfe:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01e      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d019      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e1a:	4b24      	ldr	r3, [pc, #144]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e26:	4b21      	ldr	r3, [pc, #132]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2c:	4a1f      	ldr	r2, [pc, #124]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e46:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d016      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fb fe2e 	bl	8000ab8 <HAL_GetTick>
 8004e5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fb fe2a 	bl	8000ab8 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d902      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	74fb      	strb	r3, [r7, #19]
            break;
 8004e76:	e006      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0ec      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9a:	4904      	ldr	r1, [pc, #16]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ea2:	e009      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	74bb      	strb	r3, [r7, #18]
 8004ea8:	e006      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004eaa:	bf00      	nop
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eb8:	7c7b      	ldrb	r3, [r7, #17]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d105      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b8a      	ldr	r3, [pc, #552]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec2:	4a89      	ldr	r2, [pc, #548]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ed6:	4b84      	ldr	r3, [pc, #528]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f023 0203 	bic.w	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	4980      	ldr	r1, [pc, #512]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ef8:	4b7b      	ldr	r3, [pc, #492]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f023 020c 	bic.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	4978      	ldr	r1, [pc, #480]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f1a:	4b73      	ldr	r3, [pc, #460]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	496f      	ldr	r1, [pc, #444]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f3c:	4b6a      	ldr	r3, [pc, #424]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4a:	4967      	ldr	r1, [pc, #412]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f5e:	4b62      	ldr	r3, [pc, #392]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	495e      	ldr	r1, [pc, #376]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f80:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	4956      	ldr	r1, [pc, #344]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fa2:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	494d      	ldr	r1, [pc, #308]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d028      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fc4:	4b48      	ldr	r3, [pc, #288]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	4945      	ldr	r1, [pc, #276]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe2:	d106      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fe4:	4b40      	ldr	r3, [pc, #256]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	4a3f      	ldr	r2, [pc, #252]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fee:	60d3      	str	r3, [r2, #12]
 8004ff0:	e011      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f882 	bl	800510c <RCCEx_PLLSAI1_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800500c:	7cfb      	ldrb	r3, [r7, #19]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d028      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005022:	4b31      	ldr	r3, [pc, #196]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	492d      	ldr	r1, [pc, #180]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005040:	d106      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005042:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005048:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800504c:	60d3      	str	r3, [r2, #12]
 800504e:	e011      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005058:	d10c      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3304      	adds	r3, #4
 800505e:	2101      	movs	r1, #1
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f853 	bl	800510c <RCCEx_PLLSAI1_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01c      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005080:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800508e:	4916      	ldr	r1, [pc, #88]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509e:	d10c      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	2102      	movs	r1, #2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f830 	bl	800510c <RCCEx_PLLSAI1_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d4:	4904      	ldr	r1, [pc, #16]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000

080050ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a04      	ldr	r2, [pc, #16]	; (8005108 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050f6:	f043 0304 	orr.w	r3, r3, #4
 80050fa:	6013      	str	r3, [r2, #0]
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40021000 	.word	0x40021000

0800510c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511a:	4b74      	ldr	r3, [pc, #464]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005126:	4b71      	ldr	r3, [pc, #452]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d10d      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
       ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800513e:	4b6b      	ldr	r3, [pc, #428]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
       ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d047      	beq.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e044      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d018      	beq.n	8005192 <RCCEx_PLLSAI1_Config+0x86>
 8005160:	2b03      	cmp	r3, #3
 8005162:	d825      	bhi.n	80051b0 <RCCEx_PLLSAI1_Config+0xa4>
 8005164:	2b01      	cmp	r3, #1
 8005166:	d002      	beq.n	800516e <RCCEx_PLLSAI1_Config+0x62>
 8005168:	2b02      	cmp	r3, #2
 800516a:	d009      	beq.n	8005180 <RCCEx_PLLSAI1_Config+0x74>
 800516c:	e020      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800516e:	4b5f      	ldr	r3, [pc, #380]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11d      	bne.n	80051b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517e:	e01a      	b.n	80051b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005180:	4b5a      	ldr	r3, [pc, #360]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005190:	e013      	b.n	80051ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005192:	4b56      	ldr	r3, [pc, #344]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800519e:	4b53      	ldr	r3, [pc, #332]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ae:	e006      	b.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e004      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051be:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051c6:	4b49      	ldr	r3, [pc, #292]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6819      	ldr	r1, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	430b      	orrs	r3, r1
 80051dc:	4943      	ldr	r1, [pc, #268]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d17c      	bne.n	80052e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051e8:	4b40      	ldr	r3, [pc, #256]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fb fc60 	bl	8000ab8 <HAL_GetTick>
 80051f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051fa:	e009      	b.n	8005210 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051fc:	f7fb fc5c 	bl	8000ab8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	73fb      	strb	r3, [r7, #15]
        break;
 800520e:	e005      	b.n	800521c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ef      	bne.n	80051fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d15f      	bne.n	80052e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d110      	bne.n	800524a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005230:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	0211      	lsls	r1, r2, #8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68d2      	ldr	r2, [r2, #12]
 800523e:	06d2      	lsls	r2, r2, #27
 8005240:	430a      	orrs	r2, r1
 8005242:	492a      	ldr	r1, [pc, #168]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005244:	4313      	orrs	r3, r2
 8005246:	610b      	str	r3, [r1, #16]
 8005248:	e027      	b.n	800529a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d112      	bne.n	8005276 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005250:	4b26      	ldr	r3, [pc, #152]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005258:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6892      	ldr	r2, [r2, #8]
 8005260:	0211      	lsls	r1, r2, #8
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6912      	ldr	r2, [r2, #16]
 8005266:	0852      	lsrs	r2, r2, #1
 8005268:	3a01      	subs	r2, #1
 800526a:	0552      	lsls	r2, r2, #21
 800526c:	430a      	orrs	r2, r1
 800526e:	491f      	ldr	r1, [pc, #124]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	610b      	str	r3, [r1, #16]
 8005274:	e011      	b.n	800529a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005276:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800527e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6892      	ldr	r2, [r2, #8]
 8005286:	0211      	lsls	r1, r2, #8
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6952      	ldr	r2, [r2, #20]
 800528c:	0852      	lsrs	r2, r2, #1
 800528e:	3a01      	subs	r2, #1
 8005290:	0652      	lsls	r2, r2, #25
 8005292:	430a      	orrs	r2, r1
 8005294:	4915      	ldr	r1, [pc, #84]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8005296:	4313      	orrs	r3, r2
 8005298:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800529a:	4b14      	ldr	r3, [pc, #80]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a13      	ldr	r2, [pc, #76]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a6:	f7fb fc07 	bl	8000ab8 <HAL_GetTick>
 80052aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ac:	e009      	b.n	80052c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052ae:	f7fb fc03 	bl	8000ab8 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d902      	bls.n	80052c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	73fb      	strb	r3, [r7, #15]
          break;
 80052c0:	e005      	b.n	80052ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0ef      	beq.n	80052ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	4903      	ldr	r1, [pc, #12]	; (80052ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000

080052f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e049      	b.n	8005396 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fb facc 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f000 f94c 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d001      	beq.n	80053b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e033      	b.n	8005420 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_TIM_Base_Start+0x8c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_TIM_Base_Start+0x3e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d2:	d004      	beq.n	80053de <HAL_TIM_Base_Start+0x3e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <HAL_TIM_Base_Start+0x90>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d115      	bne.n	800540a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	4b13      	ldr	r3, [pc, #76]	; (8005434 <HAL_TIM_Base_Start+0x94>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2b06      	cmp	r3, #6
 80053ee:	d015      	beq.n	800541c <HAL_TIM_Base_Start+0x7c>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f6:	d011      	beq.n	800541c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005408:	e008      	b.n	800541c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	e000      	b.n	800541e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40014000 	.word	0x40014000
 8005434:	00010007 	.word	0x00010007

08005438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIM_ConfigClockSource+0x1c>
 8005450:	2302      	movs	r3, #2
 8005452:	e0b6      	b.n	80055c2 <HAL_TIM_ConfigClockSource+0x18a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800547e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005490:	d03e      	beq.n	8005510 <HAL_TIM_ConfigClockSource+0xd8>
 8005492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005496:	f200 8087 	bhi.w	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	f000 8086 	beq.w	80055ae <HAL_TIM_ConfigClockSource+0x176>
 80054a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a6:	d87f      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d01a      	beq.n	80054e2 <HAL_TIM_ConfigClockSource+0xaa>
 80054ac:	2b70      	cmp	r3, #112	; 0x70
 80054ae:	d87b      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 80054b0:	2b60      	cmp	r3, #96	; 0x60
 80054b2:	d050      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x11e>
 80054b4:	2b60      	cmp	r3, #96	; 0x60
 80054b6:	d877      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 80054b8:	2b50      	cmp	r3, #80	; 0x50
 80054ba:	d03c      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0xfe>
 80054bc:	2b50      	cmp	r3, #80	; 0x50
 80054be:	d873      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d058      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x13e>
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d86f      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 80054c8:	2b30      	cmp	r3, #48	; 0x30
 80054ca:	d064      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15e>
 80054cc:	2b30      	cmp	r3, #48	; 0x30
 80054ce:	d86b      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d060      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15e>
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d867      	bhi.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15e>
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d05a      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0x15e>
 80054e0:	e062      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054f2:	f000 f955 	bl	80057a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	609a      	str	r2, [r3, #8]
      break;
 800550e:	e04f      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005520:	f000 f93e 	bl	80057a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005532:	609a      	str	r2, [r3, #8]
      break;
 8005534:	e03c      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005542:	461a      	mov	r2, r3
 8005544:	f000 f8b2 	bl	80056ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2150      	movs	r1, #80	; 0x50
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f90b 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005554:	e02c      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005562:	461a      	mov	r2, r3
 8005564:	f000 f8d1 	bl	800570a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2160      	movs	r1, #96	; 0x60
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f8fb 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005574:	e01c      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	461a      	mov	r2, r3
 8005584:	f000 f892 	bl	80056ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2140      	movs	r1, #64	; 0x40
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f8eb 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005594:	e00c      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f000 f8e2 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 80055a6:	e003      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
      break;
 80055ac:	e000      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a30      	ldr	r2, [pc, #192]	; (80056a0 <TIM_Base_SetConfig+0xd4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x20>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a27      	ldr	r2, [pc, #156]	; (80056a0 <TIM_Base_SetConfig+0xd4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_Base_SetConfig+0x52>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d007      	beq.n	800561e <TIM_Base_SetConfig+0x52>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a24      	ldr	r2, [pc, #144]	; (80056a4 <TIM_Base_SetConfig+0xd8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_Base_SetConfig+0x52>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a23      	ldr	r2, [pc, #140]	; (80056a8 <TIM_Base_SetConfig+0xdc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d108      	bne.n	8005630 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <TIM_Base_SetConfig+0xd4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d007      	beq.n	800566c <TIM_Base_SetConfig+0xa0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <TIM_Base_SetConfig+0xd8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_Base_SetConfig+0xa0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a10      	ldr	r2, [pc, #64]	; (80056a8 <TIM_Base_SetConfig+0xdc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d103      	bne.n	8005674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b01      	cmp	r3, #1
 8005684:	d105      	bne.n	8005692 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f023 0201 	bic.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	611a      	str	r2, [r3, #16]
  }
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40012c00 	.word	0x40012c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400

080056ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	4313      	orrs	r3, r2
 80056e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 030a 	bic.w	r3, r3, #10
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570a:	b480      	push	{r7}
 800570c:	b087      	sub	sp, #28
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f023 0210 	bic.w	r2, r3, #16
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005746:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	f043 0307 	orr.w	r3, r3, #7
 800578c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	021a      	lsls	r2, r3, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e04f      	b.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d108      	bne.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005828:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005860:	d004      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a10      	ldr	r2, [pc, #64]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10c      	bne.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	4313      	orrs	r3, r2
 800587c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40014000 	.word	0x40014000

080058ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	4638      	mov	r0, r7
 80058b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058d8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80058dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b085      	sub	sp, #20
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80058fe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005902:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	b29b      	uxth	r3, r3
 8005910:	43db      	mvns	r3, r3
 8005912:	b29b      	uxth	r3, r3
 8005914:	4013      	ands	r3, r2
 8005916:	b29a      	uxth	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	4638      	mov	r0, r7
 8005950:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005984:	b480      	push	{r7}
 8005986:	b0a7      	sub	sp, #156	; 0x9c
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	78db      	ldrb	r3, [r3, #3]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d81f      	bhi.n	80059f6 <USB_ActivateEndpoint+0x72>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <USB_ActivateEndpoint+0x38>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059cd 	.word	0x080059cd
 80059c0:	080059e9 	.word	0x080059e9
 80059c4:	080059ff 	.word	0x080059ff
 80059c8:	080059db 	.word	0x080059db
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80059cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80059d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059d4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
      break;
 80059d8:	e012      	b.n	8005a00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80059da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80059de:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80059e2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
      break;
 80059e6:	e00b      	b.n	8005a00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80059e8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80059ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059f0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
      break;
 80059f4:	e004      	b.n	8005a00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      break;
 80059fc:	e000      	b.n	8005a00 <USB_ActivateEndpoint+0x7c>
      break;
 80059fe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	b21b      	sxth	r3, r3
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	b21a      	sxth	r2, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b21b      	sxth	r3, r3
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	441a      	add	r2, r3
 8005a54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	7b1b      	ldrb	r3, [r3, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f040 8180 	bne.w	8005d76 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8084 	beq.w	8005b88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	4413      	add	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	00da      	lsls	r2, r3, #3
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	88db      	ldrh	r3, [r3, #6]
 8005aa8:	085b      	lsrs	r3, r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	827b      	strh	r3, [r7, #18]
 8005ac2:	8a7b      	ldrh	r3, [r7, #18]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d01b      	beq.n	8005b04 <USB_ActivateEndpoint+0x180>
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	823b      	strh	r3, [r7, #16]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	8a3b      	ldrh	r3, [r7, #16]
 8005af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	78db      	ldrb	r3, [r3, #3]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d020      	beq.n	8005b4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b22:	81bb      	strh	r3, [r7, #12]
 8005b24:	89bb      	ldrh	r3, [r7, #12]
 8005b26:	f083 0320 	eor.w	r3, r3, #32
 8005b2a:	81bb      	strh	r3, [r7, #12]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	89bb      	ldrh	r3, [r7, #12]
 8005b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8013      	strh	r3, [r2, #0]
 8005b4c:	e3f9      	b.n	8006342 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b64:	81fb      	strh	r3, [r7, #14]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	89fb      	ldrh	r3, [r7, #14]
 8005b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8013      	strh	r3, [r2, #0]
 8005b86:	e3dc      	b.n	8006342 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	4413      	add	r3, r2
 8005b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	00da      	lsls	r2, r3, #3
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	88db      	ldrh	r3, [r3, #6]
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	4413      	add	r3, r2
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	00da      	lsls	r2, r3, #3
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	4413      	add	r3, r2
 8005bda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <USB_ActivateEndpoint+0x28a>
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	e041      	b.n	8005c92 <USB_ActivateEndpoint+0x30e>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b3e      	cmp	r3, #62	; 0x3e
 8005c14:	d81c      	bhi.n	8005c50 <USB_ActivateEndpoint+0x2cc>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <USB_ActivateEndpoint+0x2b2>
 8005c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c30:	3301      	adds	r3, #1
 8005c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e020      	b.n	8005c92 <USB_ActivateEndpoint+0x30e>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <USB_ActivateEndpoint+0x2ec>
 8005c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d01b      	beq.n	8005ce2 <USB_ActivateEndpoint+0x35e>
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	843b      	strh	r3, [r7, #32]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	8c3b      	ldrh	r3, [r7, #32]
 8005cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d124      	bne.n	8005d34 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d00:	83bb      	strh	r3, [r7, #28]
 8005d02:	8bbb      	ldrh	r3, [r7, #28]
 8005d04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d08:	83bb      	strh	r3, [r7, #28]
 8005d0a:	8bbb      	ldrh	r3, [r7, #28]
 8005d0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d10:	83bb      	strh	r3, [r7, #28]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	8bbb      	ldrh	r3, [r7, #28]
 8005d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	8013      	strh	r3, [r2, #0]
 8005d32:	e306      	b.n	8006342 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4a:	83fb      	strh	r3, [r7, #30]
 8005d4c:	8bfb      	ldrh	r3, [r7, #30]
 8005d4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d52:	83fb      	strh	r3, [r7, #30]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	8bfb      	ldrh	r3, [r7, #30]
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]
 8005d74:	e2e5      	b.n	8006342 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	78db      	ldrb	r3, [r3, #3]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d11e      	bne.n	8005dbc <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d94:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	8013      	strh	r3, [r2, #0]
 8005dba:	e01d      	b.n	8005df8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	441a      	add	r2, r3
 8005de0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e08:	4413      	add	r3, r2
 8005e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	00da      	lsls	r2, r3, #3
 8005e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	891b      	ldrh	r3, [r3, #8]
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2a:	801a      	strh	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	677b      	str	r3, [r7, #116]	; 0x74
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e3c:	4413      	add	r3, r2
 8005e3e:	677b      	str	r3, [r7, #116]	; 0x74
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	00da      	lsls	r2, r3, #3
 8005e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e48:	4413      	add	r3, r2
 8005e4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	895b      	ldrh	r3, [r3, #10]
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f040 81af 	bne.w	80061c8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8005e7a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01d      	beq.n	8005ec2 <USB_ActivateEndpoint+0x53e>
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005eae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005ed2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01d      	beq.n	8005f1a <USB_ActivateEndpoint+0x596>
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d16b      	bne.n	8005ffa <USB_ActivateEndpoint+0x676>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f32:	4413      	add	r3, r2
 8005f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	00da      	lsls	r2, r3, #3
 8005f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <USB_ActivateEndpoint+0x5f0>
 8005f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	e05d      	b.n	8006030 <USB_ActivateEndpoint+0x6ac>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b3e      	cmp	r3, #62	; 0x3e
 8005f7a:	d81c      	bhi.n	8005fb6 <USB_ActivateEndpoint+0x632>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <USB_ActivateEndpoint+0x618>
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	3301      	adds	r3, #1
 8005f98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	029b      	lsls	r3, r3, #10
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e03c      	b.n	8006030 <USB_ActivateEndpoint+0x6ac>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <USB_ActivateEndpoint+0x652>
 8005fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	029b      	lsls	r3, r3, #10
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	e01a      	b.n	8006030 <USB_ActivateEndpoint+0x6ac>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d116      	bne.n	8006030 <USB_ActivateEndpoint+0x6ac>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	657b      	str	r3, [r7, #84]	; 0x54
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600c:	b29b      	uxth	r3, r3
 800600e:	461a      	mov	r2, r3
 8006010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006012:	4413      	add	r3, r2
 8006014:	657b      	str	r3, [r7, #84]	; 0x54
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	00da      	lsls	r2, r3, #3
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	4413      	add	r3, r2
 8006020:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006024:	653b      	str	r3, [r7, #80]	; 0x50
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	b29a      	uxth	r2, r3
 800602c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	647b      	str	r3, [r7, #68]	; 0x44
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d16b      	bne.n	8006114 <USB_ActivateEndpoint+0x790>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006046:	b29b      	uxth	r3, r3
 8006048:	461a      	mov	r2, r3
 800604a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604c:	4413      	add	r3, r2
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	00da      	lsls	r2, r3, #3
 8006056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006058:	4413      	add	r3, r2
 800605a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800606a:	b29a      	uxth	r2, r3
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <USB_ActivateEndpoint+0x70a>
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006086:	b29a      	uxth	r2, r3
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e05b      	b.n	8006146 <USB_ActivateEndpoint+0x7c2>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b3e      	cmp	r3, #62	; 0x3e
 8006094:	d81c      	bhi.n	80060d0 <USB_ActivateEndpoint+0x74c>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	085b      	lsrs	r3, r3, #1
 800609c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <USB_ActivateEndpoint+0x732>
 80060ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060b0:	3301      	adds	r3, #1
 80060b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	029b      	lsls	r3, r3, #10
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e03a      	b.n	8006146 <USB_ActivateEndpoint+0x7c2>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <USB_ActivateEndpoint+0x76c>
 80060e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ea:	3b01      	subs	r3, #1
 80060ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	029b      	lsls	r3, r3, #10
 80060fe:	b29b      	uxth	r3, r3
 8006100:	4313      	orrs	r3, r2
 8006102:	b29b      	uxth	r3, r3
 8006104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610c:	b29a      	uxth	r2, r3
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	e018      	b.n	8006146 <USB_ActivateEndpoint+0x7c2>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d114      	bne.n	8006146 <USB_ActivateEndpoint+0x7c2>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006122:	b29b      	uxth	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006128:	4413      	add	r3, r2
 800612a:	647b      	str	r3, [r7, #68]	; 0x44
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	00da      	lsls	r2, r3, #3
 8006132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006134:	4413      	add	r3, r2
 8006136:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800613a:	643b      	str	r3, [r7, #64]	; 0x40
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	b29a      	uxth	r2, r3
 8006142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006144:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800615e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006160:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006164:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006166:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006168:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800616c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	441a      	add	r2, r3
 80061b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80061b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	8013      	strh	r3, [r2, #0]
 80061c6:	e0bc      	b.n	8006342 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80061d8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80061dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01d      	beq.n	8006220 <USB_ActivateEndpoint+0x89c>
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	441a      	add	r2, r3
 8006208:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800620c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800621c:	b29b      	uxth	r3, r3
 800621e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006230:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01d      	beq.n	8006278 <USB_ActivateEndpoint+0x8f4>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006252:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d024      	beq.n	80062ca <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800629a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800629e:	f083 0320 	eor.w	r3, r3, #32
 80062a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	441a      	add	r2, r3
 80062b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80062b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	8013      	strh	r3, [r2, #0]
 80062c8:	e01d      	b.n	8006306 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006302:	b29b      	uxth	r3, r3
 8006304:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006342:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006346:	4618      	mov	r0, r3
 8006348:	379c      	adds	r7, #156	; 0x9c
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop

08006354 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006354:	b480      	push	{r7}
 8006356:	b08d      	sub	sp, #52	; 0x34
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	7b1b      	ldrb	r3, [r3, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 808e 	bne.w	8006484 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d044      	beq.n	80063fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	81bb      	strh	r3, [r7, #12]
 800637e:	89bb      	ldrh	r3, [r7, #12]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01b      	beq.n	80063c0 <USB_DeactivateEndpoint+0x6c>
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639e:	817b      	strh	r3, [r7, #10]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	897b      	ldrh	r3, [r7, #10]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d6:	813b      	strh	r3, [r7, #8]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	893b      	ldrh	r3, [r7, #8]
 80063e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]
 80063f8:	e192      	b.n	8006720 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	827b      	strh	r3, [r7, #18]
 8006408:	8a7b      	ldrh	r3, [r7, #18]
 800640a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01b      	beq.n	800644a <USB_DeactivateEndpoint+0xf6>
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006428:	823b      	strh	r3, [r7, #16]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	8a3b      	ldrh	r3, [r7, #16]
 8006436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006446:	b29b      	uxth	r3, r3
 8006448:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	81fb      	strh	r3, [r7, #14]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	441a      	add	r2, r3
 800646c:	89fb      	ldrh	r3, [r7, #14]
 800646e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]
 8006482:	e14d      	b.n	8006720 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 80a5 	bne.w	80065d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	843b      	strh	r3, [r7, #32]
 800649c:	8c3b      	ldrh	r3, [r7, #32]
 800649e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d01b      	beq.n	80064de <USB_DeactivateEndpoint+0x18a>
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064bc:	83fb      	strh	r3, [r7, #30]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	441a      	add	r2, r3
 80064c8:	8bfb      	ldrh	r3, [r7, #30]
 80064ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064da:	b29b      	uxth	r3, r3
 80064dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	83bb      	strh	r3, [r7, #28]
 80064ec:	8bbb      	ldrh	r3, [r7, #28]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01b      	beq.n	800652e <USB_DeactivateEndpoint+0x1da>
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650c:	837b      	strh	r3, [r7, #26]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	8b7b      	ldrh	r3, [r7, #26]
 800651a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006544:	833b      	strh	r3, [r7, #24]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	8b3b      	ldrh	r3, [r7, #24]
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	82fb      	strh	r3, [r7, #22]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	8afb      	ldrh	r3, [r7, #22]
 800658a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	b29b      	uxth	r3, r3
 800659c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b4:	82bb      	strh	r3, [r7, #20]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	441a      	add	r2, r3
 80065c0:	8abb      	ldrh	r3, [r7, #20]
 80065c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	8013      	strh	r3, [r2, #0]
 80065d6:	e0a3      	b.n	8006720 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80065e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01b      	beq.n	8006628 <USB_DeactivateEndpoint+0x2d4>
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	441a      	add	r2, r3
 8006612:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006624:	b29b      	uxth	r3, r3
 8006626:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01b      	beq.n	8006678 <USB_DeactivateEndpoint+0x324>
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006656:	853b      	strh	r3, [r7, #40]	; 0x28
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	441a      	add	r2, r3
 800669a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800669c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800670c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671c:	b29b      	uxth	r3, r3
 800671e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3734      	adds	r7, #52	; 0x34
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b0ac      	sub	sp, #176	; 0xb0
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b01      	cmp	r3, #1
 800673e:	f040 84ca 	bne.w	80070d6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	429a      	cmp	r2, r3
 800674c:	d904      	bls.n	8006758 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006756:	e003      	b.n	8006760 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	7b1b      	ldrb	r3, [r3, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d122      	bne.n	80067ae <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6959      	ldr	r1, [r3, #20]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	88da      	ldrh	r2, [r3, #6]
 8006770:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006774:	b29b      	uxth	r3, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fede 	bl	8007538 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	613b      	str	r3, [r7, #16]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	461a      	mov	r2, r3
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4413      	add	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	00da      	lsls	r2, r3, #3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	f000 bc6f 	b.w	800708c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	78db      	ldrb	r3, [r3, #3]
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	f040 831e 	bne.w	8006df4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	f240 82cf 	bls.w	8006d64 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6a1a      	ldr	r2, [r3, #32]
 8006806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 814f 	beq.w	8006ac6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d16b      	bne.n	800690c <USB_EPStartXfer+0x1de>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683e:	b29b      	uxth	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	4413      	add	r3, r2
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	00da      	lsls	r2, r3, #3
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	4413      	add	r3, r2
 8006852:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006862:	b29a      	uxth	r2, r3
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <USB_EPStartXfer+0x158>
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800687a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800687e:	b29a      	uxth	r2, r3
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e05b      	b.n	800693e <USB_EPStartXfer+0x210>
 8006886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800688a:	2b3e      	cmp	r3, #62	; 0x3e
 800688c:	d81c      	bhi.n	80068c8 <USB_EPStartXfer+0x19a>
 800688e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006892:	085b      	lsrs	r3, r3, #1
 8006894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <USB_EPStartXfer+0x180>
 80068a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068a8:	3301      	adds	r3, #1
 80068aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	029b      	lsls	r3, r3, #10
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4313      	orrs	r3, r2
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	e03a      	b.n	800693e <USB_EPStartXfer+0x210>
 80068c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d104      	bne.n	80068e8 <USB_EPStartXfer+0x1ba>
 80068de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068e2:	3b01      	subs	r3, #1
 80068e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	029b      	lsls	r3, r3, #10
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4313      	orrs	r3, r2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006904:	b29a      	uxth	r2, r3
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e018      	b.n	800693e <USB_EPStartXfer+0x210>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d114      	bne.n	800693e <USB_EPStartXfer+0x210>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691a:	b29b      	uxth	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	4413      	add	r3, r2
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	00da      	lsls	r2, r3, #3
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	4413      	add	r3, r2
 800692e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006938:	b29a      	uxth	r2, r3
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	895b      	ldrh	r3, [r3, #10]
 8006942:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6959      	ldr	r1, [r3, #20]
 800694a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800694e:	b29b      	uxth	r3, r3
 8006950:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fdef 	bl	8007538 <USB_WritePMA>
            ep->xfer_buff += len;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006962:	441a      	add	r2, r3
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	429a      	cmp	r2, r3
 8006972:	d907      	bls.n	8006984 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6a1a      	ldr	r2, [r3, #32]
 8006978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	621a      	str	r2, [r3, #32]
 8006982:	e006      	b.n	8006992 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
              ep->xfer_len_db = 0U;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d16b      	bne.n	8006a72 <USB_EPStartXfer+0x344>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	461a      	mov	r2, r3
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	4413      	add	r3, r2
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	00da      	lsls	r2, r3, #3
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	4413      	add	r3, r2
 80069b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <USB_EPStartXfer+0x2be>
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e05d      	b.n	8006aa8 <USB_EPStartXfer+0x37a>
 80069ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069f0:	2b3e      	cmp	r3, #62	; 0x3e
 80069f2:	d81c      	bhi.n	8006a2e <USB_EPStartXfer+0x300>
 80069f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <USB_EPStartXfer+0x2e6>
 8006a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a0e:	3301      	adds	r3, #1
 8006a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	029b      	lsls	r3, r3, #10
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	4313      	orrs	r3, r2
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	801a      	strh	r2, [r3, #0]
 8006a2c:	e03c      	b.n	8006aa8 <USB_EPStartXfer+0x37a>
 8006a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a3c:	f003 031f 	and.w	r3, r3, #31
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d104      	bne.n	8006a4e <USB_EPStartXfer+0x320>
 8006a44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	029b      	lsls	r3, r3, #10
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	801a      	strh	r2, [r3, #0]
 8006a70:	e01a      	b.n	8006aa8 <USB_EPStartXfer+0x37a>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d116      	bne.n	8006aa8 <USB_EPStartXfer+0x37a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	623b      	str	r3, [r7, #32]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	00da      	lsls	r2, r3, #3
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	4413      	add	r3, r2
 8006a98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	891b      	ldrh	r3, [r3, #8]
 8006aac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6959      	ldr	r1, [r3, #20]
 8006ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fd3a 	bl	8007538 <USB_WritePMA>
 8006ac4:	e2e2      	b.n	800708c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d16b      	bne.n	8006ba6 <USB_EPStartXfer+0x478>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ade:	4413      	add	r3, r2
 8006ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	00da      	lsls	r2, r3, #3
 8006ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006af0:	647b      	str	r3, [r7, #68]	; 0x44
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <USB_EPStartXfer+0x3f2>
 8006b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1c:	801a      	strh	r2, [r3, #0]
 8006b1e:	e05d      	b.n	8006bdc <USB_EPStartXfer+0x4ae>
 8006b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b24:	2b3e      	cmp	r3, #62	; 0x3e
 8006b26:	d81c      	bhi.n	8006b62 <USB_EPStartXfer+0x434>
 8006b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b2c:	085b      	lsrs	r3, r3, #1
 8006b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <USB_EPStartXfer+0x41a>
 8006b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b42:	3301      	adds	r3, #1
 8006b44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	029b      	lsls	r3, r3, #10
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5e:	801a      	strh	r2, [r3, #0]
 8006b60:	e03c      	b.n	8006bdc <USB_EPStartXfer+0x4ae>
 8006b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b70:	f003 031f 	and.w	r3, r3, #31
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <USB_EPStartXfer+0x454>
 8006b78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	029b      	lsls	r3, r3, #10
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	e01a      	b.n	8006bdc <USB_EPStartXfer+0x4ae>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d116      	bne.n	8006bdc <USB_EPStartXfer+0x4ae>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bbe:	4413      	add	r3, r2
 8006bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	00da      	lsls	r2, r3, #3
 8006bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bca:	4413      	add	r3, r2
 8006bcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	891b      	ldrh	r3, [r3, #8]
 8006be0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	6959      	ldr	r1, [r3, #20]
 8006be8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fca0 	bl	8007538 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	695a      	ldr	r2, [r3, #20]
 8006bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c00:	441a      	add	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6a1a      	ldr	r2, [r3, #32]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d907      	bls.n	8006c22 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	621a      	str	r2, [r3, #32]
 8006c20:	e006      	b.n	8006c30 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
              ep->xfer_len_db = 0U;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	643b      	str	r3, [r7, #64]	; 0x40
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d16b      	bne.n	8006d14 <USB_EPStartXfer+0x5e6>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	4413      	add	r3, r2
 8006c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	00da      	lsls	r2, r3, #3
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	4413      	add	r3, r2
 8006c5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <USB_EPStartXfer+0x560>
 8006c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	e05b      	b.n	8006d46 <USB_EPStartXfer+0x618>
 8006c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c92:	2b3e      	cmp	r3, #62	; 0x3e
 8006c94:	d81c      	bhi.n	8006cd0 <USB_EPStartXfer+0x5a2>
 8006c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <USB_EPStartXfer+0x588>
 8006cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	029b      	lsls	r3, r3, #10
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	801a      	strh	r2, [r3, #0]
 8006cce:	e03a      	b.n	8006d46 <USB_EPStartXfer+0x618>
 8006cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cd4:	095b      	lsrs	r3, r3, #5
 8006cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <USB_EPStartXfer+0x5c2>
 8006ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cea:	3b01      	subs	r3, #1
 8006cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	029b      	lsls	r3, r3, #10
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4313      	orrs	r3, r2
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e018      	b.n	8006d46 <USB_EPStartXfer+0x618>
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d114      	bne.n	8006d46 <USB_EPStartXfer+0x618>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d28:	4413      	add	r3, r2
 8006d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	00da      	lsls	r2, r3, #3
 8006d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d34:	4413      	add	r3, r2
 8006d36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	895b      	ldrh	r3, [r3, #10]
 8006d4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	6959      	ldr	r1, [r3, #20]
 8006d52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fbeb 	bl	8007538 <USB_WritePMA>
 8006d62:	e193      	b.n	800708c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	441a      	add	r2, r3
 8006d90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db8:	4413      	add	r3, r2
 8006dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	00da      	lsls	r2, r3, #3
 8006dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	891b      	ldrh	r3, [r3, #8]
 8006dda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6959      	ldr	r1, [r3, #20]
 8006de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fba3 	bl	8007538 <USB_WritePMA>
 8006df2:	e14b      	b.n	800708c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6a1a      	ldr	r2, [r3, #32]
 8006df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006dfc:	1ad2      	subs	r2, r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 809a 	beq.w	8006f4e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	673b      	str	r3, [r7, #112]	; 0x70
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d16b      	bne.n	8006efe <USB_EPStartXfer+0x7d0>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e36:	4413      	add	r3, r2
 8006e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	00da      	lsls	r2, r3, #3
 8006e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e42:	4413      	add	r3, r2
 8006e44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e48:	667b      	str	r3, [r7, #100]	; 0x64
 8006e4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <USB_EPStartXfer+0x74a>
 8006e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	e05b      	b.n	8006f30 <USB_EPStartXfer+0x802>
 8006e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7e:	d81c      	bhi.n	8006eba <USB_EPStartXfer+0x78c>
 8006e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <USB_EPStartXfer+0x772>
 8006e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	029b      	lsls	r3, r3, #10
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb6:	801a      	strh	r2, [r3, #0]
 8006eb8:	e03a      	b.n	8006f30 <USB_EPStartXfer+0x802>
 8006eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <USB_EPStartXfer+0x7ac>
 8006ed0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006edc:	881b      	ldrh	r3, [r3, #0]
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	029b      	lsls	r3, r3, #10
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e018      	b.n	8006f30 <USB_EPStartXfer+0x802>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d114      	bne.n	8006f30 <USB_EPStartXfer+0x802>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f12:	4413      	add	r3, r2
 8006f14:	673b      	str	r3, [r7, #112]	; 0x70
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	00da      	lsls	r2, r3, #3
 8006f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	895b      	ldrh	r3, [r3, #10]
 8006f34:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	6959      	ldr	r1, [r3, #20]
 8006f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 faf6 	bl	8007538 <USB_WritePMA>
 8006f4c:	e09e      	b.n	800708c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d16b      	bne.n	800702e <USB_EPStartXfer+0x900>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f66:	4413      	add	r3, r2
 8006f68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	00da      	lsls	r2, r3, #3
 8006f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f72:	4413      	add	r3, r2
 8006f74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <USB_EPStartXfer+0x87a>
 8006f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	e063      	b.n	8007070 <USB_EPStartXfer+0x942>
 8006fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fac:	2b3e      	cmp	r3, #62	; 0x3e
 8006fae:	d81c      	bhi.n	8006fea <USB_EPStartXfer+0x8bc>
 8006fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <USB_EPStartXfer+0x8a2>
 8006fc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e042      	b.n	8007070 <USB_EPStartXfer+0x942>
 8006fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff8:	f003 031f 	and.w	r3, r3, #31
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <USB_EPStartXfer+0x8dc>
 8007000:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007004:	3b01      	subs	r3, #1
 8007006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800700a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29a      	uxth	r2, r3
 8007010:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007014:	b29b      	uxth	r3, r3
 8007016:	029b      	lsls	r3, r3, #10
 8007018:	b29b      	uxth	r3, r3
 800701a:	4313      	orrs	r3, r2
 800701c:	b29b      	uxth	r3, r3
 800701e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007026:	b29a      	uxth	r2, r3
 8007028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	e020      	b.n	8007070 <USB_EPStartXfer+0x942>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d11c      	bne.n	8007070 <USB_EPStartXfer+0x942>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800704a:	4413      	add	r3, r2
 800704c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	00da      	lsls	r2, r3, #3
 8007056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800705a:	4413      	add	r3, r2
 800705c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007068:	b29a      	uxth	r2, r3
 800706a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800706e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	891b      	ldrh	r3, [r3, #8]
 8007074:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	6959      	ldr	r1, [r3, #20]
 800707c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007080:	b29b      	uxth	r3, r3
 8007082:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa56 	bl	8007538 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	b29b      	uxth	r3, r3
 800709a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800709e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a2:	817b      	strh	r3, [r7, #10]
 80070a4:	897b      	ldrh	r3, [r7, #10]
 80070a6:	f083 0310 	eor.w	r3, r3, #16
 80070aa:	817b      	strh	r3, [r7, #10]
 80070ac:	897b      	ldrh	r3, [r7, #10]
 80070ae:	f083 0320 	eor.w	r3, r3, #32
 80070b2:	817b      	strh	r3, [r7, #10]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	441a      	add	r2, r3
 80070be:	897b      	ldrh	r3, [r7, #10]
 80070c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	8013      	strh	r3, [r2, #0]
 80070d4:	e0d5      	b.n	8007282 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	7b1b      	ldrb	r3, [r3, #12]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d156      	bne.n	800718c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d122      	bne.n	800712c <USB_EPStartXfer+0x9fe>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	78db      	ldrb	r3, [r3, #3]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d11e      	bne.n	800712c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007104:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	441a      	add	r2, r3
 8007112:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007126:	b29b      	uxth	r3, r3
 8007128:	8013      	strh	r3, [r2, #0]
 800712a:	e01d      	b.n	8007168 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800713e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007142:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	441a      	add	r2, r3
 8007150:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800715c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007164:	b29b      	uxth	r3, r3
 8007166:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	429a      	cmp	r2, r3
 8007172:	d907      	bls.n	8007184 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	619a      	str	r2, [r3, #24]
 8007182:	e054      	b.n	800722e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	619a      	str	r2, [r3, #24]
 800718a:	e050      	b.n	800722e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	78db      	ldrb	r3, [r3, #3]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d142      	bne.n	800721a <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d048      	beq.n	800722e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80071b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <USB_EPStartXfer+0xa96>
 80071b8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10b      	bne.n	80071dc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80071c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d12e      	bne.n	800722e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071d0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d128      	bne.n	800722e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8007204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007210:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007214:	b29b      	uxth	r3, r3
 8007216:	8013      	strh	r3, [r2, #0]
 8007218:	e009      	b.n	800722e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	78db      	ldrb	r3, [r3, #3]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d103      	bne.n	800722a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2200      	movs	r2, #0
 8007226:	619a      	str	r2, [r3, #24]
 8007228:	e001      	b.n	800722e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e02a      	b.n	8007284 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007248:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800724c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007250:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007254:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007258:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800725c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	441a      	add	r2, r3
 800726a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800726e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800727a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727e:	b29b      	uxth	r3, r3
 8007280:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	37b0      	adds	r7, #176	; 0xb0
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d020      	beq.n	80072e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b4:	81bb      	strh	r3, [r7, #12]
 80072b6:	89bb      	ldrh	r3, [r7, #12]
 80072b8:	f083 0310 	eor.w	r3, r3, #16
 80072bc:	81bb      	strh	r3, [r7, #12]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	441a      	add	r2, r3
 80072c8:	89bb      	ldrh	r3, [r7, #12]
 80072ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072da:	b29b      	uxth	r3, r3
 80072dc:	8013      	strh	r3, [r2, #0]
 80072de:	e01f      	b.n	8007320 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f6:	81fb      	strh	r3, [r7, #14]
 80072f8:	89fb      	ldrh	r3, [r7, #14]
 80072fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80072fe:	81fb      	strh	r3, [r7, #14]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	441a      	add	r2, r3
 800730a:	89fb      	ldrh	r3, [r7, #14]
 800730c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731c:	b29b      	uxth	r3, r3
 800731e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800732e:	b480      	push	{r7}
 8007330:	b087      	sub	sp, #28
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d04c      	beq.n	80073da <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	823b      	strh	r3, [r7, #16]
 800734e:	8a3b      	ldrh	r3, [r7, #16]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01b      	beq.n	8007390 <USB_EPClearStall+0x62>
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736e:	81fb      	strh	r3, [r7, #14]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	89fb      	ldrh	r3, [r7, #14]
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	78db      	ldrb	r3, [r3, #3]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d06c      	beq.n	8007472 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	81bb      	strh	r3, [r7, #12]
 80073b0:	89bb      	ldrh	r3, [r7, #12]
 80073b2:	f083 0320 	eor.w	r3, r3, #32
 80073b6:	81bb      	strh	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	89bb      	ldrh	r3, [r7, #12]
 80073c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	8013      	strh	r3, [r2, #0]
 80073d8:	e04b      	b.n	8007472 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	82fb      	strh	r3, [r7, #22]
 80073e8:	8afb      	ldrh	r3, [r7, #22]
 80073ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d01b      	beq.n	800742a <USB_EPClearStall+0xfc>
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007408:	82bb      	strh	r3, [r7, #20]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	441a      	add	r2, r3
 8007414:	8abb      	ldrh	r3, [r7, #20]
 8007416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800741e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007426:	b29b      	uxth	r3, r3
 8007428:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800743c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007440:	827b      	strh	r3, [r7, #18]
 8007442:	8a7b      	ldrh	r3, [r7, #18]
 8007444:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007448:	827b      	strh	r3, [r7, #18]
 800744a:	8a7b      	ldrh	r3, [r7, #18]
 800744c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007450:	827b      	strh	r3, [r7, #18]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	441a      	add	r2, r3
 800745c:	8a7b      	ldrh	r3, [r7, #18]
 800745e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800746a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746e:	b29b      	uxth	r3, r3
 8007470:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2280      	movs	r2, #128	; 0x80
 8007496:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800750e:	b29b      	uxth	r3, r3
 8007510:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007538:	b480      	push	{r7}
 800753a:	b08b      	sub	sp, #44	; 0x2c
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4611      	mov	r1, r2
 8007544:	461a      	mov	r2, r3
 8007546:	460b      	mov	r3, r1
 8007548:	80fb      	strh	r3, [r7, #6]
 800754a:	4613      	mov	r3, r2
 800754c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800754e:	88bb      	ldrh	r3, [r7, #4]
 8007550:	3301      	adds	r3, #1
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800755e:	88fa      	ldrh	r2, [r7, #6]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007568:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
 800756e:	e01b      	b.n	80075a8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	3301      	adds	r3, #1
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	b21a      	sxth	r2, r3
 8007580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007584:	4313      	orrs	r3, r2
 8007586:	b21b      	sxth	r3, r3
 8007588:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	8a7a      	ldrh	r2, [r7, #18]
 800758e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	3302      	adds	r3, #2
 8007594:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	3301      	adds	r3, #1
 800759a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	3301      	adds	r3, #1
 80075a0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	3b01      	subs	r3, #1
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e0      	bne.n	8007570 <USB_WritePMA+0x38>
  }
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	372c      	adds	r7, #44	; 0x2c
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075bc:	b480      	push	{r7}
 80075be:	b08b      	sub	sp, #44	; 0x2c
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4611      	mov	r1, r2
 80075c8:	461a      	mov	r2, r3
 80075ca:	460b      	mov	r3, r1
 80075cc:	80fb      	strh	r3, [r7, #6]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075d2:	88bb      	ldrh	r3, [r7, #4]
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
 80075f2:	e018      	b.n	8007626 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	3302      	adds	r3, #2
 8007600:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	b2da      	uxtb	r2, r3
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	3301      	adds	r3, #1
 800760e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b2da      	uxtb	r2, r3
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3301      	adds	r3, #1
 800761e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	3b01      	subs	r3, #1
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e3      	bne.n	80075f4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800762c:	88bb      	ldrh	r3, [r7, #4]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	b2da      	uxtb	r2, r3
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	701a      	strb	r2, [r3, #0]
  }
}
 8007648:	bf00      	nop
 800764a:	372c      	adds	r7, #44	; 0x2c
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007660:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007664:	f002 fd00 	bl	800a068 <USBD_static_malloc>
 8007668:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	32b0      	adds	r2, #176	; 0xb0
 800767a:	2100      	movs	r1, #0
 800767c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007680:	2302      	movs	r3, #2
 8007682:	e0d4      	b.n	800782e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007684:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f002 fd0a 	bl	800a0a4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	32b0      	adds	r2, #176	; 0xb0
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32b0      	adds	r2, #176	; 0xb0
 80076aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	7c1b      	ldrb	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d138      	bne.n	800772e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80076bc:	4b5e      	ldr	r3, [pc, #376]	; (8007838 <USBD_CDC_Init+0x1e4>)
 80076be:	7819      	ldrb	r1, [r3, #0]
 80076c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076c4:	2202      	movs	r2, #2
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f002 fad2 	bl	8009c70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80076cc:	4b5a      	ldr	r3, [pc, #360]	; (8007838 <USBD_CDC_Init+0x1e4>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 020f 	and.w	r2, r3, #15
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	440b      	add	r3, r1
 80076e0:	3324      	adds	r3, #36	; 0x24
 80076e2:	2201      	movs	r2, #1
 80076e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80076e6:	4b55      	ldr	r3, [pc, #340]	; (800783c <USBD_CDC_Init+0x1e8>)
 80076e8:	7819      	ldrb	r1, [r3, #0]
 80076ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ee:	2202      	movs	r2, #2
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f002 fabd 	bl	8009c70 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80076f6:	4b51      	ldr	r3, [pc, #324]	; (800783c <USBD_CDC_Init+0x1e8>)
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 020f 	and.w	r2, r3, #15
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800770e:	2201      	movs	r2, #1
 8007710:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007712:	4b4b      	ldr	r3, [pc, #300]	; (8007840 <USBD_CDC_Init+0x1ec>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 020f 	and.w	r2, r3, #15
 800771a:	6879      	ldr	r1, [r7, #4]
 800771c:	4613      	mov	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	4413      	add	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	440b      	add	r3, r1
 8007726:	3326      	adds	r3, #38	; 0x26
 8007728:	2210      	movs	r2, #16
 800772a:	801a      	strh	r2, [r3, #0]
 800772c:	e035      	b.n	800779a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800772e:	4b42      	ldr	r3, [pc, #264]	; (8007838 <USBD_CDC_Init+0x1e4>)
 8007730:	7819      	ldrb	r1, [r3, #0]
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	2202      	movs	r2, #2
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f002 fa9a 	bl	8009c70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800773c:	4b3e      	ldr	r3, [pc, #248]	; (8007838 <USBD_CDC_Init+0x1e4>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	f003 020f 	and.w	r2, r3, #15
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	4413      	add	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	440b      	add	r3, r1
 8007750:	3324      	adds	r3, #36	; 0x24
 8007752:	2201      	movs	r2, #1
 8007754:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007756:	4b39      	ldr	r3, [pc, #228]	; (800783c <USBD_CDC_Init+0x1e8>)
 8007758:	7819      	ldrb	r1, [r3, #0]
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	2202      	movs	r2, #2
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f002 fa86 	bl	8009c70 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007764:	4b35      	ldr	r3, [pc, #212]	; (800783c <USBD_CDC_Init+0x1e8>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	f003 020f 	and.w	r2, r3, #15
 800776c:	6879      	ldr	r1, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	440b      	add	r3, r1
 8007778:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800777c:	2201      	movs	r2, #1
 800777e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007780:	4b2f      	ldr	r3, [pc, #188]	; (8007840 <USBD_CDC_Init+0x1ec>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	f003 020f 	and.w	r2, r3, #15
 8007788:	6879      	ldr	r1, [r7, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	440b      	add	r3, r1
 8007794:	3326      	adds	r3, #38	; 0x26
 8007796:	2210      	movs	r2, #16
 8007798:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800779a:	4b29      	ldr	r3, [pc, #164]	; (8007840 <USBD_CDC_Init+0x1ec>)
 800779c:	7819      	ldrb	r1, [r3, #0]
 800779e:	2308      	movs	r3, #8
 80077a0:	2203      	movs	r2, #3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f002 fa64 	bl	8009c70 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80077a8:	4b25      	ldr	r3, [pc, #148]	; (8007840 <USBD_CDC_Init+0x1ec>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	3324      	adds	r3, #36	; 0x24
 80077be:	2201      	movs	r2, #1
 80077c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	33b0      	adds	r3, #176	; 0xb0
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80077f8:	2302      	movs	r3, #2
 80077fa:	e018      	b.n	800782e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7c1b      	ldrb	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <USBD_CDC_Init+0x1e8>)
 8007806:	7819      	ldrb	r1, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800780e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f002 fba6 	bl	8009f64 <USBD_LL_PrepareReceive>
 8007818:	e008      	b.n	800782c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800781a:	4b08      	ldr	r3, [pc, #32]	; (800783c <USBD_CDC_Init+0x1e8>)
 800781c:	7819      	ldrb	r1, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007824:	2340      	movs	r3, #64	; 0x40
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f002 fb9c 	bl	8009f64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	20000093 	.word	0x20000093
 800783c:	20000094 	.word	0x20000094
 8007840:	20000095 	.word	0x20000095

08007844 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007850:	4b3a      	ldr	r3, [pc, #232]	; (800793c <USBD_CDC_DeInit+0xf8>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f002 fa48 	bl	8009cec <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800785c:	4b37      	ldr	r3, [pc, #220]	; (800793c <USBD_CDC_DeInit+0xf8>)
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f003 020f 	and.w	r2, r3, #15
 8007864:	6879      	ldr	r1, [r7, #4]
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	3324      	adds	r3, #36	; 0x24
 8007872:	2200      	movs	r2, #0
 8007874:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007876:	4b32      	ldr	r3, [pc, #200]	; (8007940 <USBD_CDC_DeInit+0xfc>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f002 fa35 	bl	8009cec <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007882:	4b2f      	ldr	r3, [pc, #188]	; (8007940 <USBD_CDC_DeInit+0xfc>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	f003 020f 	and.w	r2, r3, #15
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800789a:	2200      	movs	r2, #0
 800789c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800789e:	4b29      	ldr	r3, [pc, #164]	; (8007944 <USBD_CDC_DeInit+0x100>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f002 fa21 	bl	8009cec <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80078aa:	4b26      	ldr	r3, [pc, #152]	; (8007944 <USBD_CDC_DeInit+0x100>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	f003 020f 	and.w	r2, r3, #15
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	3324      	adds	r3, #36	; 0x24
 80078c0:	2200      	movs	r2, #0
 80078c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80078c4:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <USBD_CDC_DeInit+0x100>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f003 020f 	and.w	r2, r3, #15
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	3326      	adds	r3, #38	; 0x26
 80078da:	2200      	movs	r2, #0
 80078dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	32b0      	adds	r2, #176	; 0xb0
 80078e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01f      	beq.n	8007930 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	33b0      	adds	r3, #176	; 0xb0
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	32b0      	adds	r2, #176	; 0xb0
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	4618      	mov	r0, r3
 8007914:	f002 fbb6 	bl	800a084 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	32b0      	adds	r2, #176	; 0xb0
 8007922:	2100      	movs	r1, #0
 8007924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3708      	adds	r7, #8
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000093 	.word	0x20000093
 8007940:	20000094 	.word	0x20000094
 8007944:	20000095 	.word	0x20000095

08007948 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	32b0      	adds	r2, #176	; 0xb0
 800795c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007960:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d101      	bne.n	8007978 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	e0bf      	b.n	8007af8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007980:	2b00      	cmp	r3, #0
 8007982:	d050      	beq.n	8007a26 <USBD_CDC_Setup+0xde>
 8007984:	2b20      	cmp	r3, #32
 8007986:	f040 80af 	bne.w	8007ae8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88db      	ldrh	r3, [r3, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d03a      	beq.n	8007a08 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	b25b      	sxtb	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	da1b      	bge.n	80079d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	33b0      	adds	r3, #176	; 0xb0
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80079b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	88d2      	ldrh	r2, [r2, #6]
 80079b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	2b07      	cmp	r3, #7
 80079c0:	bf28      	it	cs
 80079c2:	2307      	movcs	r3, #7
 80079c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	89fa      	ldrh	r2, [r7, #14]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fd2d 	bl	800942c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80079d2:	e090      	b.n	8007af6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	785a      	ldrb	r2, [r3, #1]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	88db      	ldrh	r3, [r3, #6]
 80079e2:	2b3f      	cmp	r3, #63	; 0x3f
 80079e4:	d803      	bhi.n	80079ee <USBD_CDC_Setup+0xa6>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	e000      	b.n	80079f0 <USBD_CDC_Setup+0xa8>
 80079ee:	2240      	movs	r2, #64	; 0x40
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80079f6:	6939      	ldr	r1, [r7, #16]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80079fe:	461a      	mov	r2, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 fd3f 	bl	8009484 <USBD_CtlPrepareRx>
      break;
 8007a06:	e076      	b.n	8007af6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	33b0      	adds	r3, #176	; 0xb0
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	7850      	ldrb	r0, [r2, #1]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	4798      	blx	r3
      break;
 8007a24:	e067      	b.n	8007af6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	785b      	ldrb	r3, [r3, #1]
 8007a2a:	2b0b      	cmp	r3, #11
 8007a2c:	d851      	bhi.n	8007ad2 <USBD_CDC_Setup+0x18a>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBD_CDC_Setup+0xec>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a65 	.word	0x08007a65
 8007a38:	08007ae1 	.word	0x08007ae1
 8007a3c:	08007ad3 	.word	0x08007ad3
 8007a40:	08007ad3 	.word	0x08007ad3
 8007a44:	08007ad3 	.word	0x08007ad3
 8007a48:	08007ad3 	.word	0x08007ad3
 8007a4c:	08007ad3 	.word	0x08007ad3
 8007a50:	08007ad3 	.word	0x08007ad3
 8007a54:	08007ad3 	.word	0x08007ad3
 8007a58:	08007ad3 	.word	0x08007ad3
 8007a5c:	08007a8f 	.word	0x08007a8f
 8007a60:	08007ab9 	.word	0x08007ab9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d107      	bne.n	8007a80 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007a70:	f107 030a 	add.w	r3, r7, #10
 8007a74:	2202      	movs	r2, #2
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fcd7 	bl	800942c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a7e:	e032      	b.n	8007ae6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f001 fc55 	bl	8009332 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	75fb      	strb	r3, [r7, #23]
          break;
 8007a8c:	e02b      	b.n	8007ae6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d107      	bne.n	8007aaa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a9a:	f107 030d 	add.w	r3, r7, #13
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fcc2 	bl	800942c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007aa8:	e01d      	b.n	8007ae6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fc40 	bl	8009332 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ab6:	e016      	b.n	8007ae6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d00f      	beq.n	8007ae4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 fc33 	bl	8009332 <USBD_CtlError>
            ret = USBD_FAIL;
 8007acc:	2303      	movs	r3, #3
 8007ace:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ad0:	e008      	b.n	8007ae4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fc2c 	bl	8009332 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	75fb      	strb	r3, [r7, #23]
          break;
 8007ade:	e002      	b.n	8007ae6 <USBD_CDC_Setup+0x19e>
          break;
 8007ae0:	bf00      	nop
 8007ae2:	e008      	b.n	8007af6 <USBD_CDC_Setup+0x1ae>
          break;
 8007ae4:	bf00      	nop
      }
      break;
 8007ae6:	e006      	b.n	8007af6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 fc21 	bl	8009332 <USBD_CtlError>
      ret = USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	75fb      	strb	r3, [r7, #23]
      break;
 8007af4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b12:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	32b0      	adds	r2, #176	; 0xb0
 8007b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e065      	b.n	8007bf6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	32b0      	adds	r2, #176	; 0xb0
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	f003 020f 	and.w	r2, r3, #15
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	3318      	adds	r3, #24
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d02f      	beq.n	8007bb4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	f003 020f 	and.w	r2, r3, #15
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	3318      	adds	r3, #24
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	f003 010f 	and.w	r1, r3, #15
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	460b      	mov	r3, r1
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4403      	add	r3, r0
 8007b7c:	3320      	adds	r3, #32
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b84:	fb01 f303 	mul.w	r3, r1, r3
 8007b88:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d112      	bne.n	8007bb4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	f003 020f 	and.w	r2, r3, #15
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ba6:	78f9      	ldrb	r1, [r7, #3]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f002 f9a1 	bl	8009ef4 <USBD_LL_Transmit>
 8007bb2:	e01f      	b.n	8007bf4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	33b0      	adds	r3, #176	; 0xb0
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d010      	beq.n	8007bf4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	33b0      	adds	r3, #176	; 0xb0
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	32b0      	adds	r2, #176	; 0xb0
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	32b0      	adds	r2, #176	; 0xb0
 8007c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e01a      	b.n	8007c66 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f002 f9cd 	bl	8009fd4 <USBD_LL_GetRxDataSize>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	33b0      	adds	r3, #176	; 0xb0
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c60:	4611      	mov	r1, r2
 8007c62:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b084      	sub	sp, #16
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	32b0      	adds	r2, #176	; 0xb0
 8007c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e025      	b.n	8007cdc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	33b0      	adds	r3, #176	; 0xb0
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01a      	beq.n	8007cda <USBD_CDC_EP0_RxReady+0x6c>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007caa:	2bff      	cmp	r3, #255	; 0xff
 8007cac:	d015      	beq.n	8007cda <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	33b0      	adds	r3, #176	; 0xb0
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4413      	add	r3, r2
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007cc6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007cce:	b292      	uxth	r2, r2
 8007cd0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cec:	2182      	movs	r1, #130	; 0x82
 8007cee:	4818      	ldr	r0, [pc, #96]	; (8007d50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cf0:	f000 fcbd 	bl	800866e <USBD_GetEpDesc>
 8007cf4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4815      	ldr	r0, [pc, #84]	; (8007d50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007cfa:	f000 fcb8 	bl	800866e <USBD_GetEpDesc>
 8007cfe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d00:	2181      	movs	r1, #129	; 0x81
 8007d02:	4813      	ldr	r0, [pc, #76]	; (8007d50 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007d04:	f000 fcb3 	bl	800866e <USBD_GetEpDesc>
 8007d08:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	2210      	movs	r2, #16
 8007d14:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d006      	beq.n	8007d2a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d24:	711a      	strb	r2, [r3, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d006      	beq.n	8007d3e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d38:	711a      	strb	r2, [r3, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2243      	movs	r2, #67	; 0x43
 8007d42:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d44:	4b02      	ldr	r3, [pc, #8]	; (8007d50 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000050 	.word	0x20000050

08007d54 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007d5c:	2182      	movs	r1, #130	; 0x82
 8007d5e:	4818      	ldr	r0, [pc, #96]	; (8007dc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d60:	f000 fc85 	bl	800866e <USBD_GetEpDesc>
 8007d64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007d66:	2101      	movs	r1, #1
 8007d68:	4815      	ldr	r0, [pc, #84]	; (8007dc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d6a:	f000 fc80 	bl	800866e <USBD_GetEpDesc>
 8007d6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007d70:	2181      	movs	r1, #129	; 0x81
 8007d72:	4813      	ldr	r0, [pc, #76]	; (8007dc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007d74:	f000 fc7b 	bl	800866e <USBD_GetEpDesc>
 8007d78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2210      	movs	r2, #16
 8007d84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d006      	beq.n	8007d9a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	711a      	strb	r2, [r3, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f042 0202 	orr.w	r2, r2, #2
 8007d98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d006      	beq.n	8007dae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	711a      	strb	r2, [r3, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f042 0202 	orr.w	r2, r2, #2
 8007dac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2243      	movs	r2, #67	; 0x43
 8007db2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007db4:	4b02      	ldr	r3, [pc, #8]	; (8007dc0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000050 	.word	0x20000050

08007dc4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dcc:	2182      	movs	r1, #130	; 0x82
 8007dce:	4818      	ldr	r0, [pc, #96]	; (8007e30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dd0:	f000 fc4d 	bl	800866e <USBD_GetEpDesc>
 8007dd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	4815      	ldr	r0, [pc, #84]	; (8007e30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007dda:	f000 fc48 	bl	800866e <USBD_GetEpDesc>
 8007dde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007de0:	2181      	movs	r1, #129	; 0x81
 8007de2:	4813      	ldr	r0, [pc, #76]	; (8007e30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007de4:	f000 fc43 	bl	800866e <USBD_GetEpDesc>
 8007de8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2210      	movs	r2, #16
 8007df4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d006      	beq.n	8007e0a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e04:	711a      	strb	r2, [r3, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d006      	beq.n	8007e1e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e18:	711a      	strb	r2, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2243      	movs	r2, #67	; 0x43
 8007e22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000050 	.word	0x20000050

08007e34 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	220a      	movs	r2, #10
 8007e40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007e42:	4b03      	ldr	r3, [pc, #12]	; (8007e50 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	2000000c 	.word	0x2000000c

08007e54 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e009      	b.n	8007e7c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	33b0      	adds	r3, #176	; 0xb0
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	32b0      	adds	r2, #176	; 0xb0
 8007e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e008      	b.n	8007ec0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	32b0      	adds	r2, #176	; 0xb0
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e004      	b.n	8007efa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32b0      	adds	r2, #176	; 0xb0
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e025      	b.n	8007f7a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d11f      	bne.n	8007f78 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007f40:	4b10      	ldr	r3, [pc, #64]	; (8007f84 <USBD_CDC_TransmitPacket+0x7c>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 020f 	and.w	r2, r3, #15
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4403      	add	r3, r0
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007f5e:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <USBD_CDC_TransmitPacket+0x7c>)
 8007f60:	7819      	ldrb	r1, [r3, #0]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f001 ffc0 	bl	8009ef4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000093 	.word	0x20000093

08007f88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32b0      	adds	r2, #176	; 0xb0
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32b0      	adds	r2, #176	; 0xb0
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e018      	b.n	8007fe8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	7c1b      	ldrb	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fbe:	4b0c      	ldr	r3, [pc, #48]	; (8007ff0 <USBD_CDC_ReceivePacket+0x68>)
 8007fc0:	7819      	ldrb	r1, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 ffc9 	bl	8009f64 <USBD_LL_PrepareReceive>
 8007fd2:	e008      	b.n	8007fe6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007fd4:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <USBD_CDC_ReceivePacket+0x68>)
 8007fd6:	7819      	ldrb	r1, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fde:	2340      	movs	r3, #64	; 0x40
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f001 ffbf 	bl	8009f64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000094 	.word	0x20000094

08007ff4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008008:	2303      	movs	r3, #3
 800800a:	e01f      	b.n	800804c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	79fa      	ldrb	r2, [r7, #7]
 800803e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f001 fd81 	bl	8009b48 <USBD_LL_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	75fb      	strb	r3, [r7, #23]

  return ret;
 800804a:	7dfb      	ldrb	r3, [r7, #23]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	e025      	b.n	80080b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	32ae      	adds	r2, #174	; 0xae
 800807e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00f      	beq.n	80080a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	32ae      	adds	r2, #174	; 0xae
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	f107 020e 	add.w	r2, r7, #14
 800809c:	4610      	mov	r0, r2
 800809e:	4798      	blx	r3
 80080a0:	4602      	mov	r2, r0
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fd9f 	bl	8009c0c <USBD_LL_Start>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008104:	2b00      	cmp	r3, #0
 8008106:	d009      	beq.n	800811c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	78fa      	ldrb	r2, [r7, #3]
 8008112:	4611      	mov	r1, r2
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	78fa      	ldrb	r2, [r7, #3]
 8008140:	4611      	mov	r1, r2
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800814c:	2303      	movs	r3, #3
 800814e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008150:	7bfb      	ldrb	r3, [r7, #15]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f8a6 	bl	80092be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008180:	461a      	mov	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800818e:	f003 031f 	and.w	r3, r3, #31
 8008192:	2b02      	cmp	r3, #2
 8008194:	d01a      	beq.n	80081cc <USBD_LL_SetupStage+0x72>
 8008196:	2b02      	cmp	r3, #2
 8008198:	d822      	bhi.n	80081e0 <USBD_LL_SetupStage+0x86>
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <USBD_LL_SetupStage+0x4a>
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d00a      	beq.n	80081b8 <USBD_LL_SetupStage+0x5e>
 80081a2:	e01d      	b.n	80081e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fad3 	bl	8008758 <USBD_StdDevReq>
 80081b2:	4603      	mov	r3, r0
 80081b4:	73fb      	strb	r3, [r7, #15]
      break;
 80081b6:	e020      	b.n	80081fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fb3b 	bl	800883c <USBD_StdItfReq>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ca:	e016      	b.n	80081fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fb9d 	bl	8008914 <USBD_StdEPReq>
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]
      break;
 80081de:	e00c      	b.n	80081fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80081e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f001 fdb2 	bl	8009d58 <USBD_LL_StallEP>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
      break;
 80081f8:	bf00      	nop
  }

  return ret;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	460b      	mov	r3, r1
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008216:	7afb      	ldrb	r3, [r7, #11]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d16e      	bne.n	80082fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008222:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800822a:	2b03      	cmp	r3, #3
 800822c:	f040 8098 	bne.w	8008360 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	429a      	cmp	r2, r3
 800823a:	d913      	bls.n	8008264 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	1ad2      	subs	r2, r2, r3
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	4293      	cmp	r3, r2
 8008254:	bf28      	it	cs
 8008256:	4613      	movcs	r3, r2
 8008258:	461a      	mov	r2, r3
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f001 f92e 	bl	80094be <USBD_CtlContinueRx>
 8008262:	e07d      	b.n	8008360 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	2b02      	cmp	r3, #2
 8008270:	d014      	beq.n	800829c <USBD_LL_DataOutStage+0x98>
 8008272:	2b02      	cmp	r3, #2
 8008274:	d81d      	bhi.n	80082b2 <USBD_LL_DataOutStage+0xae>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <USBD_LL_DataOutStage+0x7c>
 800827a:	2b01      	cmp	r3, #1
 800827c:	d003      	beq.n	8008286 <USBD_LL_DataOutStage+0x82>
 800827e:	e018      	b.n	80082b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	75bb      	strb	r3, [r7, #22]
            break;
 8008284:	e018      	b.n	80082b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800828c:	b2db      	uxtb	r3, r3
 800828e:	4619      	mov	r1, r3
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f9d2 	bl	800863a <USBD_CoreFindIF>
 8008296:	4603      	mov	r3, r0
 8008298:	75bb      	strb	r3, [r7, #22]
            break;
 800829a:	e00d      	b.n	80082b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	4619      	mov	r1, r3
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 f9d4 	bl	8008654 <USBD_CoreFindEP>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75bb      	strb	r3, [r7, #22]
            break;
 80082b0:	e002      	b.n	80082b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75bb      	strb	r3, [r7, #22]
            break;
 80082b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80082b8:	7dbb      	ldrb	r3, [r7, #22]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d119      	bne.n	80082f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d113      	bne.n	80082f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80082ca:	7dba      	ldrb	r2, [r7, #22]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	32ae      	adds	r2, #174	; 0xae
 80082d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00b      	beq.n	80082f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80082da:	7dba      	ldrb	r2, [r7, #22]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80082e2:	7dba      	ldrb	r2, [r7, #22]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	32ae      	adds	r2, #174	; 0xae
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f001 f8f4 	bl	80094e0 <USBD_CtlSendStatus>
 80082f8:	e032      	b.n	8008360 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008300:	b2db      	uxtb	r3, r3
 8008302:	4619      	mov	r1, r3
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f9a5 	bl	8008654 <USBD_CoreFindEP>
 800830a:	4603      	mov	r3, r0
 800830c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800830e:	7dbb      	ldrb	r3, [r7, #22]
 8008310:	2bff      	cmp	r3, #255	; 0xff
 8008312:	d025      	beq.n	8008360 <USBD_LL_DataOutStage+0x15c>
 8008314:	7dbb      	ldrb	r3, [r7, #22]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d122      	bne.n	8008360 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d117      	bne.n	8008356 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008326:	7dba      	ldrb	r2, [r7, #22]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	32ae      	adds	r2, #174	; 0xae
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00f      	beq.n	8008356 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008336:	7dba      	ldrb	r2, [r7, #22]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800833e:	7dba      	ldrb	r2, [r7, #22]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	32ae      	adds	r2, #174	; 0xae
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	7afa      	ldrb	r2, [r7, #11]
 800834c:	4611      	mov	r1, r2
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	4798      	blx	r3
 8008352:	4603      	mov	r3, r0
 8008354:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008356:	7dfb      	ldrb	r3, [r7, #23]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	e000      	b.n	8008362 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b086      	sub	sp, #24
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	460b      	mov	r3, r1
 8008374:	607a      	str	r2, [r7, #4]
 8008376:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d16f      	bne.n	800845e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3314      	adds	r3, #20
 8008382:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800838a:	2b02      	cmp	r3, #2
 800838c:	d15a      	bne.n	8008444 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	689a      	ldr	r2, [r3, #8]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	429a      	cmp	r2, r3
 8008398:	d914      	bls.n	80083c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	461a      	mov	r2, r3
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f001 f856 	bl	8009462 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083b6:	2300      	movs	r3, #0
 80083b8:	2200      	movs	r2, #0
 80083ba:	2100      	movs	r1, #0
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f001 fdd1 	bl	8009f64 <USBD_LL_PrepareReceive>
 80083c2:	e03f      	b.n	8008444 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d11c      	bne.n	800840a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80083d8:	429a      	cmp	r2, r3
 80083da:	d316      	bcc.n	800840a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d20f      	bcs.n	800840a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083ea:	2200      	movs	r2, #0
 80083ec:	2100      	movs	r1, #0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f001 f837 	bl	8009462 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083fc:	2300      	movs	r3, #0
 80083fe:	2200      	movs	r2, #0
 8008400:	2100      	movs	r1, #0
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f001 fdae 	bl	8009f64 <USBD_LL_PrepareReceive>
 8008408:	e01c      	b.n	8008444 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b03      	cmp	r3, #3
 8008414:	d10f      	bne.n	8008436 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d009      	beq.n	8008436 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008436:	2180      	movs	r1, #128	; 0x80
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f001 fc8d 	bl	8009d58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f001 f861 	bl	8009506 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d03a      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fe42 	bl	80080d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800845c:	e032      	b.n	80084c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008464:	b2db      	uxtb	r3, r3
 8008466:	4619      	mov	r1, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 f8f3 	bl	8008654 <USBD_CoreFindEP>
 800846e:	4603      	mov	r3, r0
 8008470:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008472:	7dfb      	ldrb	r3, [r7, #23]
 8008474:	2bff      	cmp	r3, #255	; 0xff
 8008476:	d025      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d122      	bne.n	80084c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b03      	cmp	r3, #3
 8008488:	d11c      	bne.n	80084c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800848a:	7dfa      	ldrb	r2, [r7, #23]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	32ae      	adds	r2, #174	; 0xae
 8008490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d014      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800849a:	7dfa      	ldrb	r2, [r7, #23]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80084a2:	7dfa      	ldrb	r2, [r7, #23]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	32ae      	adds	r2, #174	; 0xae
 80084a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	7afa      	ldrb	r2, [r7, #11]
 80084b0:	4611      	mov	r1, r2
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	4798      	blx	r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80084ba:	7dbb      	ldrb	r3, [r7, #22]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80084c0:	7dbb      	ldrb	r3, [r7, #22]
 80084c2:	e000      	b.n	80084c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d014      	beq.n	8008534 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6852      	ldr	r2, [r2, #4]
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	4611      	mov	r1, r2
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	2200      	movs	r2, #0
 8008538:	2100      	movs	r1, #0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 fb98 	bl	8009c70 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2240      	movs	r2, #64	; 0x40
 800854c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	2200      	movs	r2, #0
 8008554:	2180      	movs	r1, #128	; 0x80
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 fb8a 	bl	8009c70 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2240      	movs	r2, #64	; 0x40
 8008566:	621a      	str	r2, [r3, #32]

  return ret;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d006      	beq.n	80085b4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2204      	movs	r2, #4
 80085b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d106      	bne.n	80085ec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d110      	bne.n	8008630 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d005      	beq.n	8008630 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	460b      	mov	r3, r1
 8008644:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008646:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008660:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008682:	2300      	movs	r3, #0
 8008684:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	885b      	ldrh	r3, [r3, #2]
 800868a:	b29a      	uxth	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	429a      	cmp	r2, r3
 8008694:	d920      	bls.n	80086d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	b29b      	uxth	r3, r3
 800869c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800869e:	e013      	b.n	80086c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80086a0:	f107 030a 	add.w	r3, r7, #10
 80086a4:	4619      	mov	r1, r3
 80086a6:	6978      	ldr	r0, [r7, #20]
 80086a8:	f000 f81b 	bl	80086e2 <USBD_GetNextDesc>
 80086ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	785b      	ldrb	r3, [r3, #1]
 80086b2:	2b05      	cmp	r3, #5
 80086b4:	d108      	bne.n	80086c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	789b      	ldrb	r3, [r3, #2]
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d008      	beq.n	80086d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086c4:	2300      	movs	r3, #0
 80086c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	885b      	ldrh	r3, [r3, #2]
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	897b      	ldrh	r3, [r7, #10]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d8e5      	bhi.n	80086a0 <USBD_GetEpDesc+0x32>
 80086d4:	e000      	b.n	80086d8 <USBD_GetEpDesc+0x6a>
          break;
 80086d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086d8:	693b      	ldr	r3, [r7, #16]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	881a      	ldrh	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	461a      	mov	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	3301      	adds	r3, #1
 8008732:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800873a:	8a3b      	ldrh	r3, [r7, #16]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	b21a      	sxth	r2, r3
 8008740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008744:	4313      	orrs	r3, r2
 8008746:	b21b      	sxth	r3, r3
 8008748:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800874a:	89fb      	ldrh	r3, [r7, #14]
}
 800874c:	4618      	mov	r0, r3
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800876e:	2b40      	cmp	r3, #64	; 0x40
 8008770:	d005      	beq.n	800877e <USBD_StdDevReq+0x26>
 8008772:	2b40      	cmp	r3, #64	; 0x40
 8008774:	d857      	bhi.n	8008826 <USBD_StdDevReq+0xce>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00f      	beq.n	800879a <USBD_StdDevReq+0x42>
 800877a:	2b20      	cmp	r3, #32
 800877c:	d153      	bne.n	8008826 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	32ae      	adds	r2, #174	; 0xae
 8008788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
      break;
 8008798:	e04a      	b.n	8008830 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d83b      	bhi.n	800881a <USBD_StdDevReq+0xc2>
 80087a2:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <USBD_StdDevReq+0x50>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087fd 	.word	0x080087fd
 80087ac:	08008811 	.word	0x08008811
 80087b0:	0800881b 	.word	0x0800881b
 80087b4:	08008807 	.word	0x08008807
 80087b8:	0800881b 	.word	0x0800881b
 80087bc:	080087db 	.word	0x080087db
 80087c0:	080087d1 	.word	0x080087d1
 80087c4:	0800881b 	.word	0x0800881b
 80087c8:	080087f3 	.word	0x080087f3
 80087cc:	080087e5 	.word	0x080087e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa3c 	bl	8008c50 <USBD_GetDescriptor>
          break;
 80087d8:	e024      	b.n	8008824 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fbcb 	bl	8008f78 <USBD_SetAddress>
          break;
 80087e2:	e01f      	b.n	8008824 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fc0a 	bl	8009000 <USBD_SetConfig>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]
          break;
 80087f0:	e018      	b.n	8008824 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fcad 	bl	8009154 <USBD_GetConfig>
          break;
 80087fa:	e013      	b.n	8008824 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fcde 	bl	80091c0 <USBD_GetStatus>
          break;
 8008804:	e00e      	b.n	8008824 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fd0d 	bl	8009228 <USBD_SetFeature>
          break;
 800880e:	e009      	b.n	8008824 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fd31 	bl	800927a <USBD_ClrFeature>
          break;
 8008818:	e004      	b.n	8008824 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fd88 	bl	8009332 <USBD_CtlError>
          break;
 8008822:	bf00      	nop
      }
      break;
 8008824:	e004      	b.n	8008830 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fd82 	bl	8009332 <USBD_CtlError>
      break;
 800882e:	bf00      	nop
  }

  return ret;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop

0800883c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	d005      	beq.n	8008862 <USBD_StdItfReq+0x26>
 8008856:	2b40      	cmp	r3, #64	; 0x40
 8008858:	d852      	bhi.n	8008900 <USBD_StdItfReq+0xc4>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <USBD_StdItfReq+0x26>
 800885e:	2b20      	cmp	r3, #32
 8008860:	d14e      	bne.n	8008900 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	b2db      	uxtb	r3, r3
 800886a:	3b01      	subs	r3, #1
 800886c:	2b02      	cmp	r3, #2
 800886e:	d840      	bhi.n	80088f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	889b      	ldrh	r3, [r3, #4]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b01      	cmp	r3, #1
 8008878:	d836      	bhi.n	80088e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	889b      	ldrh	r3, [r3, #4]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff fed9 	bl	800863a <USBD_CoreFindIF>
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	2bff      	cmp	r3, #255	; 0xff
 8008890:	d01d      	beq.n	80088ce <USBD_StdItfReq+0x92>
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11a      	bne.n	80088ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008898:	7bba      	ldrb	r2, [r7, #14]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	32ae      	adds	r2, #174	; 0xae
 800889e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00f      	beq.n	80088c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80088a8:	7bba      	ldrb	r2, [r7, #14]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088b0:	7bba      	ldrb	r2, [r7, #14]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	32ae      	adds	r2, #174	; 0xae
 80088b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088c6:	e004      	b.n	80088d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088c8:	2303      	movs	r3, #3
 80088ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088cc:	e001      	b.n	80088d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088ce:	2303      	movs	r3, #3
 80088d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	88db      	ldrh	r3, [r3, #6]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d110      	bne.n	80088fc <USBD_StdItfReq+0xc0>
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10d      	bne.n	80088fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fdfd 	bl	80094e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088e6:	e009      	b.n	80088fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fd21 	bl	8009332 <USBD_CtlError>
          break;
 80088f0:	e004      	b.n	80088fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fd1c 	bl	8009332 <USBD_CtlError>
          break;
 80088fa:	e000      	b.n	80088fe <USBD_StdItfReq+0xc2>
          break;
 80088fc:	bf00      	nop
      }
      break;
 80088fe:	e004      	b.n	800890a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fd15 	bl	8009332 <USBD_CtlError>
      break;
 8008908:	bf00      	nop
  }

  return ret;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	889b      	ldrh	r3, [r3, #4]
 8008926:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008930:	2b40      	cmp	r3, #64	; 0x40
 8008932:	d007      	beq.n	8008944 <USBD_StdEPReq+0x30>
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	f200 817f 	bhi.w	8008c38 <USBD_StdEPReq+0x324>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d02a      	beq.n	8008994 <USBD_StdEPReq+0x80>
 800893e:	2b20      	cmp	r3, #32
 8008940:	f040 817a 	bne.w	8008c38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7ff fe83 	bl	8008654 <USBD_CoreFindEP>
 800894e:	4603      	mov	r3, r0
 8008950:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008952:	7b7b      	ldrb	r3, [r7, #13]
 8008954:	2bff      	cmp	r3, #255	; 0xff
 8008956:	f000 8174 	beq.w	8008c42 <USBD_StdEPReq+0x32e>
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8170 	bne.w	8008c42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008962:	7b7a      	ldrb	r2, [r7, #13]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800896a:	7b7a      	ldrb	r2, [r7, #13]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	32ae      	adds	r2, #174	; 0xae
 8008970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 8163 	beq.w	8008c42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800897c:	7b7a      	ldrb	r2, [r7, #13]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	32ae      	adds	r2, #174	; 0xae
 8008982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
 800898e:	4603      	mov	r3, r0
 8008990:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008992:	e156      	b.n	8008c42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b03      	cmp	r3, #3
 800899a:	d008      	beq.n	80089ae <USBD_StdEPReq+0x9a>
 800899c:	2b03      	cmp	r3, #3
 800899e:	f300 8145 	bgt.w	8008c2c <USBD_StdEPReq+0x318>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 809b 	beq.w	8008ade <USBD_StdEPReq+0x1ca>
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d03c      	beq.n	8008a26 <USBD_StdEPReq+0x112>
 80089ac:	e13e      	b.n	8008c2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d002      	beq.n	80089c0 <USBD_StdEPReq+0xac>
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d016      	beq.n	80089ec <USBD_StdEPReq+0xd8>
 80089be:	e02c      	b.n	8008a1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00d      	beq.n	80089e2 <USBD_StdEPReq+0xce>
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b80      	cmp	r3, #128	; 0x80
 80089ca:	d00a      	beq.n	80089e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 f9c1 	bl	8009d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089d6:	2180      	movs	r1, #128	; 0x80
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f9bd 	bl	8009d58 <USBD_LL_StallEP>
 80089de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089e0:	e020      	b.n	8008a24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fca4 	bl	8009332 <USBD_CtlError>
              break;
 80089ea:	e01b      	b.n	8008a24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	885b      	ldrh	r3, [r3, #2]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10e      	bne.n	8008a12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00b      	beq.n	8008a12 <USBD_StdEPReq+0xfe>
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b80      	cmp	r3, #128	; 0x80
 80089fe:	d008      	beq.n	8008a12 <USBD_StdEPReq+0xfe>
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	88db      	ldrh	r3, [r3, #6]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 f9a3 	bl	8009d58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fd64 	bl	80094e0 <USBD_CtlSendStatus>

              break;
 8008a18:	e004      	b.n	8008a24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fc88 	bl	8009332 <USBD_CtlError>
              break;
 8008a22:	bf00      	nop
          }
          break;
 8008a24:	e107      	b.n	8008c36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d002      	beq.n	8008a38 <USBD_StdEPReq+0x124>
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d016      	beq.n	8008a64 <USBD_StdEPReq+0x150>
 8008a36:	e04b      	b.n	8008ad0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00d      	beq.n	8008a5a <USBD_StdEPReq+0x146>
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	2b80      	cmp	r3, #128	; 0x80
 8008a42:	d00a      	beq.n	8008a5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 f985 	bl	8009d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a4e:	2180      	movs	r1, #128	; 0x80
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f981 	bl	8009d58 <USBD_LL_StallEP>
 8008a56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a58:	e040      	b.n	8008adc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc68 	bl	8009332 <USBD_CtlError>
              break;
 8008a62:	e03b      	b.n	8008adc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	885b      	ldrh	r3, [r3, #2]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d136      	bne.n	8008ada <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 f9a2 	bl	8009dc4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fd2d 	bl	80094e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff fde2 	bl	8008654 <USBD_CoreFindEP>
 8008a90:	4603      	mov	r3, r0
 8008a92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a94:	7b7b      	ldrb	r3, [r7, #13]
 8008a96:	2bff      	cmp	r3, #255	; 0xff
 8008a98:	d01f      	beq.n	8008ada <USBD_StdEPReq+0x1c6>
 8008a9a:	7b7b      	ldrb	r3, [r7, #13]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11c      	bne.n	8008ada <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008aa0:	7b7a      	ldrb	r2, [r7, #13]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008aa8:	7b7a      	ldrb	r2, [r7, #13]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	32ae      	adds	r2, #174	; 0xae
 8008aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d010      	beq.n	8008ada <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ab8:	7b7a      	ldrb	r2, [r7, #13]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	32ae      	adds	r2, #174	; 0xae
 8008abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	4798      	blx	r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ace:	e004      	b.n	8008ada <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fc2d 	bl	8009332 <USBD_CtlError>
              break;
 8008ad8:	e000      	b.n	8008adc <USBD_StdEPReq+0x1c8>
              break;
 8008ada:	bf00      	nop
          }
          break;
 8008adc:	e0ab      	b.n	8008c36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d002      	beq.n	8008af0 <USBD_StdEPReq+0x1dc>
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d032      	beq.n	8008b54 <USBD_StdEPReq+0x240>
 8008aee:	e097      	b.n	8008c20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d007      	beq.n	8008b06 <USBD_StdEPReq+0x1f2>
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	2b80      	cmp	r3, #128	; 0x80
 8008afa:	d004      	beq.n	8008b06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fc17 	bl	8009332 <USBD_CtlError>
                break;
 8008b04:	e091      	b.n	8008c2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	da0b      	bge.n	8008b26 <USBD_StdEPReq+0x212>
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
 8008b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	3310      	adds	r3, #16
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	4413      	add	r3, r2
 8008b22:	3304      	adds	r3, #4
 8008b24:	e00b      	b.n	8008b3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fc6d 	bl	800942c <USBD_CtlSendData>
              break;
 8008b52:	e06a      	b.n	8008c2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	da11      	bge.n	8008b80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	f003 020f 	and.w	r2, r3, #15
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	4613      	mov	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d117      	bne.n	8008ba6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fbda 	bl	8009332 <USBD_CtlError>
                  break;
 8008b7e:	e054      	b.n	8008c2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	f003 020f 	and.w	r2, r3, #15
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d104      	bne.n	8008ba6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fbc7 	bl	8009332 <USBD_CtlError>
                  break;
 8008ba4:	e041      	b.n	8008c2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	da0b      	bge.n	8008bc6 <USBD_StdEPReq+0x2b2>
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	3310      	adds	r3, #16
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	e00b      	b.n	8008bde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
 8008bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	4413      	add	r3, r2
 8008bdc:	3304      	adds	r3, #4
 8008bde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <USBD_StdEPReq+0x2d8>
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b80      	cmp	r3, #128	; 0x80
 8008bea:	d103      	bne.n	8008bf4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	e00e      	b.n	8008c12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 f919 	bl	8009e30 <USBD_LL_IsStallEP>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e002      	b.n	8008c12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2202      	movs	r2, #2
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fc07 	bl	800942c <USBD_CtlSendData>
              break;
 8008c1e:	e004      	b.n	8008c2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fb85 	bl	8009332 <USBD_CtlError>
              break;
 8008c28:	bf00      	nop
          }
          break;
 8008c2a:	e004      	b.n	8008c36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fb7f 	bl	8009332 <USBD_CtlError>
          break;
 8008c34:	bf00      	nop
      }
      break;
 8008c36:	e005      	b.n	8008c44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fb79 	bl	8009332 <USBD_CtlError>
      break;
 8008c40:	e000      	b.n	8008c44 <USBD_StdEPReq+0x330>
      break;
 8008c42:	bf00      	nop
  }

  return ret;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	885b      	ldrh	r3, [r3, #2]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	2b0e      	cmp	r3, #14
 8008c72:	f200 8152 	bhi.w	8008f1a <USBD_GetDescriptor+0x2ca>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_GetDescriptor+0x2c>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008ced 	.word	0x08008ced
 8008c80:	08008d05 	.word	0x08008d05
 8008c84:	08008d45 	.word	0x08008d45
 8008c88:	08008f1b 	.word	0x08008f1b
 8008c8c:	08008f1b 	.word	0x08008f1b
 8008c90:	08008ebb 	.word	0x08008ebb
 8008c94:	08008ee7 	.word	0x08008ee7
 8008c98:	08008f1b 	.word	0x08008f1b
 8008c9c:	08008f1b 	.word	0x08008f1b
 8008ca0:	08008f1b 	.word	0x08008f1b
 8008ca4:	08008f1b 	.word	0x08008f1b
 8008ca8:	08008f1b 	.word	0x08008f1b
 8008cac:	08008f1b 	.word	0x08008f1b
 8008cb0:	08008f1b 	.word	0x08008f1b
 8008cb4:	08008cb9 	.word	0x08008cb9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	7c12      	ldrb	r2, [r2, #16]
 8008cd0:	f107 0108 	add.w	r1, r7, #8
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	4798      	blx	r3
 8008cd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cda:	e126      	b.n	8008f2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fb27 	bl	8009332 <USBD_CtlError>
        err++;
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cea:	e11e      	b.n	8008f2a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7c12      	ldrb	r2, [r2, #16]
 8008cf8:	f107 0108 	add.w	r1, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
      break;
 8008d02:	e112      	b.n	8008f2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7c1b      	ldrb	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10d      	bne.n	8008d28 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d14:	f107 0208 	add.w	r2, r7, #8
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
 8008d1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	2202      	movs	r2, #2
 8008d24:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d26:	e100      	b.n	8008f2a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	f107 0208 	add.w	r2, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	2202      	movs	r2, #2
 8008d40:	701a      	strb	r2, [r3, #0]
      break;
 8008d42:	e0f2      	b.n	8008f2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	885b      	ldrh	r3, [r3, #2]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b05      	cmp	r3, #5
 8008d4c:	f200 80ac 	bhi.w	8008ea8 <USBD_GetDescriptor+0x258>
 8008d50:	a201      	add	r2, pc, #4	; (adr r2, 8008d58 <USBD_GetDescriptor+0x108>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008d71 	.word	0x08008d71
 8008d5c:	08008da5 	.word	0x08008da5
 8008d60:	08008dd9 	.word	0x08008dd9
 8008d64:	08008e0d 	.word	0x08008e0d
 8008d68:	08008e41 	.word	0x08008e41
 8008d6c:	08008e75 	.word	0x08008e75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	7c12      	ldrb	r2, [r2, #16]
 8008d88:	f107 0108 	add.w	r1, r7, #8
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	4798      	blx	r3
 8008d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d92:	e091      	b.n	8008eb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 facb 	bl	8009332 <USBD_CtlError>
            err++;
 8008d9c:	7afb      	ldrb	r3, [r7, #11]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	72fb      	strb	r3, [r7, #11]
          break;
 8008da2:	e089      	b.n	8008eb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00b      	beq.n	8008dc8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	7c12      	ldrb	r2, [r2, #16]
 8008dbc:	f107 0108 	add.w	r1, r7, #8
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4798      	blx	r3
 8008dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dc6:	e077      	b.n	8008eb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fab1 	bl	8009332 <USBD_CtlError>
            err++;
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008dd6:	e06f      	b.n	8008eb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	7c12      	ldrb	r2, [r2, #16]
 8008df0:	f107 0108 	add.w	r1, r7, #8
 8008df4:	4610      	mov	r0, r2
 8008df6:	4798      	blx	r3
 8008df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dfa:	e05d      	b.n	8008eb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fa97 	bl	8009332 <USBD_CtlError>
            err++;
 8008e04:	7afb      	ldrb	r3, [r7, #11]
 8008e06:	3301      	adds	r3, #1
 8008e08:	72fb      	strb	r3, [r7, #11]
          break;
 8008e0a:	e055      	b.n	8008eb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	7c12      	ldrb	r2, [r2, #16]
 8008e24:	f107 0108 	add.w	r1, r7, #8
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4798      	blx	r3
 8008e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e2e:	e043      	b.n	8008eb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa7d 	bl	8009332 <USBD_CtlError>
            err++;
 8008e38:	7afb      	ldrb	r3, [r7, #11]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e3e:	e03b      	b.n	8008eb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	7c12      	ldrb	r2, [r2, #16]
 8008e58:	f107 0108 	add.w	r1, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e62:	e029      	b.n	8008eb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa63 	bl	8009332 <USBD_CtlError>
            err++;
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	72fb      	strb	r3, [r7, #11]
          break;
 8008e72:	e021      	b.n	8008eb8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	7c12      	ldrb	r2, [r2, #16]
 8008e8c:	f107 0108 	add.w	r1, r7, #8
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
 8008e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e96:	e00f      	b.n	8008eb8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa49 	bl	8009332 <USBD_CtlError>
            err++;
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ea6:	e007      	b.n	8008eb8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa41 	bl	8009332 <USBD_CtlError>
          err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008eb6:	bf00      	nop
      }
      break;
 8008eb8:	e037      	b.n	8008f2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7c1b      	ldrb	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eca:	f107 0208 	add.w	r2, r7, #8
 8008ece:	4610      	mov	r0, r2
 8008ed0:	4798      	blx	r3
 8008ed2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ed4:	e029      	b.n	8008f2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fa2a 	bl	8009332 <USBD_CtlError>
        err++;
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ee4:	e021      	b.n	8008f2a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7c1b      	ldrb	r3, [r3, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10d      	bne.n	8008f0a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	f107 0208 	add.w	r2, r7, #8
 8008efa:	4610      	mov	r0, r2
 8008efc:	4798      	blx	r3
 8008efe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	2207      	movs	r2, #7
 8008f06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f08:	e00f      	b.n	8008f2a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fa10 	bl	8009332 <USBD_CtlError>
        err++;
 8008f12:	7afb      	ldrb	r3, [r7, #11]
 8008f14:	3301      	adds	r3, #1
 8008f16:	72fb      	strb	r3, [r7, #11]
      break;
 8008f18:	e007      	b.n	8008f2a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fa08 	bl	8009332 <USBD_CtlError>
      err++;
 8008f22:	7afb      	ldrb	r3, [r7, #11]
 8008f24:	3301      	adds	r3, #1
 8008f26:	72fb      	strb	r3, [r7, #11]
      break;
 8008f28:	bf00      	nop
  }

  if (err != 0U)
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d11e      	bne.n	8008f6e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	88db      	ldrh	r3, [r3, #6]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d016      	beq.n	8008f66 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008f38:	893b      	ldrh	r3, [r7, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00e      	beq.n	8008f5c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	88da      	ldrh	r2, [r3, #6]
 8008f42:	893b      	ldrh	r3, [r7, #8]
 8008f44:	4293      	cmp	r3, r2
 8008f46:	bf28      	it	cs
 8008f48:	4613      	movcs	r3, r2
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f4e:	893b      	ldrh	r3, [r7, #8]
 8008f50:	461a      	mov	r2, r3
 8008f52:	68f9      	ldr	r1, [r7, #12]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fa69 	bl	800942c <USBD_CtlSendData>
 8008f5a:	e009      	b.n	8008f70 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f9e7 	bl	8009332 <USBD_CtlError>
 8008f64:	e004      	b.n	8008f70 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 faba 	bl	80094e0 <USBD_CtlSendStatus>
 8008f6c:	e000      	b.n	8008f70 <USBD_GetDescriptor+0x320>
    return;
 8008f6e:	bf00      	nop
  }
}
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop

08008f78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	889b      	ldrh	r3, [r3, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d131      	bne.n	8008fee <USBD_SetAddress+0x76>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	88db      	ldrh	r3, [r3, #6]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d12d      	bne.n	8008fee <USBD_SetAddress+0x76>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	885b      	ldrh	r3, [r3, #2]
 8008f96:	2b7f      	cmp	r3, #127	; 0x7f
 8008f98:	d829      	bhi.n	8008fee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d104      	bne.n	8008fbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f9bc 	bl	8009332 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fba:	e01d      	b.n	8008ff8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7bfa      	ldrb	r2, [r7, #15]
 8008fc0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 ff5d 	bl	8009e88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa86 	bl	80094e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2202      	movs	r2, #2
 8008fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	e009      	b.n	8008ff8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fec:	e004      	b.n	8008ff8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f99e 	bl	8009332 <USBD_CtlError>
  }
}
 8008ff6:	bf00      	nop
 8008ff8:	bf00      	nop
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	b2da      	uxtb	r2, r3
 8009014:	4b4e      	ldr	r3, [pc, #312]	; (8009150 <USBD_SetConfig+0x150>)
 8009016:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009018:	4b4d      	ldr	r3, [pc, #308]	; (8009150 <USBD_SetConfig+0x150>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d905      	bls.n	800902c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f985 	bl	8009332 <USBD_CtlError>
    return USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	e08c      	b.n	8009146 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b02      	cmp	r3, #2
 8009036:	d002      	beq.n	800903e <USBD_SetConfig+0x3e>
 8009038:	2b03      	cmp	r3, #3
 800903a:	d029      	beq.n	8009090 <USBD_SetConfig+0x90>
 800903c:	e075      	b.n	800912a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800903e:	4b44      	ldr	r3, [pc, #272]	; (8009150 <USBD_SetConfig+0x150>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d020      	beq.n	8009088 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009046:	4b42      	ldr	r3, [pc, #264]	; (8009150 <USBD_SetConfig+0x150>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009050:	4b3f      	ldr	r3, [pc, #252]	; (8009150 <USBD_SetConfig+0x150>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff f849 	bl	80080ee <USBD_SetClassConfig>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d008      	beq.n	8009078 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f962 	bl	8009332 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2202      	movs	r2, #2
 8009072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009076:	e065      	b.n	8009144 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fa31 	bl	80094e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2203      	movs	r2, #3
 8009082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009086:	e05d      	b.n	8009144 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fa29 	bl	80094e0 <USBD_CtlSendStatus>
      break;
 800908e:	e059      	b.n	8009144 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009090:	4b2f      	ldr	r3, [pc, #188]	; (8009150 <USBD_SetConfig+0x150>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d112      	bne.n	80090be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80090a0:	4b2b      	ldr	r3, [pc, #172]	; (8009150 <USBD_SetConfig+0x150>)
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	461a      	mov	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090aa:	4b29      	ldr	r3, [pc, #164]	; (8009150 <USBD_SetConfig+0x150>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff f838 	bl	8008126 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa12 	bl	80094e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80090bc:	e042      	b.n	8009144 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80090be:	4b24      	ldr	r3, [pc, #144]	; (8009150 <USBD_SetConfig+0x150>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d02a      	beq.n	8009122 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff f826 	bl	8008126 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80090da:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <USBD_SetConfig+0x150>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80090e4:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <USBD_SetConfig+0x150>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fe ffff 	bl	80080ee <USBD_SetClassConfig>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00f      	beq.n	800911a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f918 	bl	8009332 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff f80b 	bl	8008126 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2202      	movs	r2, #2
 8009114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009118:	e014      	b.n	8009144 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f9e0 	bl	80094e0 <USBD_CtlSendStatus>
      break;
 8009120:	e010      	b.n	8009144 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9dc 	bl	80094e0 <USBD_CtlSendStatus>
      break;
 8009128:	e00c      	b.n	8009144 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f900 	bl	8009332 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009132:	4b07      	ldr	r3, [pc, #28]	; (8009150 <USBD_SetConfig+0x150>)
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7fe fff4 	bl	8008126 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800913e:	2303      	movs	r3, #3
 8009140:	73fb      	strb	r3, [r7, #15]
      break;
 8009142:	bf00      	nop
  }

  return ret;
 8009144:	7bfb      	ldrb	r3, [r7, #15]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000d68 	.word	0x20000d68

08009154 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	88db      	ldrh	r3, [r3, #6]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d004      	beq.n	8009170 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8e2 	bl	8009332 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800916e:	e023      	b.n	80091b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009176:	b2db      	uxtb	r3, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	dc02      	bgt.n	8009182 <USBD_GetConfig+0x2e>
 800917c:	2b00      	cmp	r3, #0
 800917e:	dc03      	bgt.n	8009188 <USBD_GetConfig+0x34>
 8009180:	e015      	b.n	80091ae <USBD_GetConfig+0x5a>
 8009182:	2b03      	cmp	r3, #3
 8009184:	d00b      	beq.n	800919e <USBD_GetConfig+0x4a>
 8009186:	e012      	b.n	80091ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3308      	adds	r3, #8
 8009192:	2201      	movs	r2, #1
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f948 	bl	800942c <USBD_CtlSendData>
        break;
 800919c:	e00c      	b.n	80091b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3304      	adds	r3, #4
 80091a2:	2201      	movs	r2, #1
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f940 	bl	800942c <USBD_CtlSendData>
        break;
 80091ac:	e004      	b.n	80091b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f8be 	bl	8009332 <USBD_CtlError>
        break;
 80091b6:	bf00      	nop
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d81e      	bhi.n	8009216 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	88db      	ldrh	r3, [r3, #6]
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d004      	beq.n	80091ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f8a5 	bl	8009332 <USBD_CtlError>
        break;
 80091e8:	e01a      	b.n	8009220 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d005      	beq.n	8009206 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	f043 0202 	orr.w	r2, r3, #2
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	330c      	adds	r3, #12
 800920a:	2202      	movs	r2, #2
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f90c 	bl	800942c <USBD_CtlSendData>
      break;
 8009214:	e004      	b.n	8009220 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f88a 	bl	8009332 <USBD_CtlError>
      break;
 800921e:	bf00      	nop
  }
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	885b      	ldrh	r3, [r3, #2]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d107      	bne.n	800924a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f94c 	bl	80094e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009248:	e013      	b.n	8009272 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	885b      	ldrh	r3, [r3, #2]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d10b      	bne.n	800926a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	889b      	ldrh	r3, [r3, #4]
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	b29b      	uxth	r3, r3
 800925a:	b2da      	uxtb	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f93c 	bl	80094e0 <USBD_CtlSendStatus>
}
 8009268:	e003      	b.n	8009272 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f860 	bl	8009332 <USBD_CtlError>
}
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b082      	sub	sp, #8
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800928a:	b2db      	uxtb	r3, r3
 800928c:	3b01      	subs	r3, #1
 800928e:	2b02      	cmp	r3, #2
 8009290:	d80b      	bhi.n	80092aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	885b      	ldrh	r3, [r3, #2]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d10c      	bne.n	80092b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f91c 	bl	80094e0 <USBD_CtlSendStatus>
      }
      break;
 80092a8:	e004      	b.n	80092b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f840 	bl	8009332 <USBD_CtlError>
      break;
 80092b2:	e000      	b.n	80092b6 <USBD_ClrFeature+0x3c>
      break;
 80092b4:	bf00      	nop
  }
}
 80092b6:	bf00      	nop
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3301      	adds	r3, #1
 80092d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	781a      	ldrb	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3301      	adds	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7ff fa17 	bl	800871c <SWAPBYTE>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3301      	adds	r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff fa0a 	bl	800871c <SWAPBYTE>
 8009308:	4603      	mov	r3, r0
 800930a:	461a      	mov	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3301      	adds	r3, #1
 8009314:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3301      	adds	r3, #1
 800931a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff f9fd 	bl	800871c <SWAPBYTE>
 8009322:	4603      	mov	r3, r0
 8009324:	461a      	mov	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	80da      	strh	r2, [r3, #6]
}
 800932a:	bf00      	nop
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800933c:	2180      	movs	r1, #128	; 0x80
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fd0a 	bl	8009d58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009344:	2100      	movs	r1, #0
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fd06 	bl	8009d58 <USBD_LL_StallEP>
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d042      	beq.n	80093f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800936e:	6938      	ldr	r0, [r7, #16]
 8009370:	f000 f842 	bl	80093f8 <USBD_GetLen>
 8009374:	4603      	mov	r3, r0
 8009376:	3301      	adds	r3, #1
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800937e:	d808      	bhi.n	8009392 <USBD_GetString+0x3e>
 8009380:	6938      	ldr	r0, [r7, #16]
 8009382:	f000 f839 	bl	80093f8 <USBD_GetLen>
 8009386:	4603      	mov	r3, r0
 8009388:	3301      	adds	r3, #1
 800938a:	b29b      	uxth	r3, r3
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	e001      	b.n	8009396 <USBD_GetString+0x42>
 8009392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800939a:	7dfb      	ldrb	r3, [r7, #23]
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	4413      	add	r3, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7812      	ldrb	r2, [r2, #0]
 80093a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	3301      	adds	r3, #1
 80093aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	4413      	add	r3, r2
 80093b2:	2203      	movs	r2, #3
 80093b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	3301      	adds	r3, #1
 80093ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093bc:	e013      	b.n	80093e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	4413      	add	r3, r2
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3301      	adds	r3, #1
 80093ce:	613b      	str	r3, [r7, #16]
    idx++;
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	3301      	adds	r3, #1
 80093d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	4413      	add	r3, r2
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]
    idx++;
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	3301      	adds	r3, #1
 80093e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e7      	bne.n	80093be <USBD_GetString+0x6a>
 80093ee:	e000      	b.n	80093f2 <USBD_GetString+0x9e>
    return;
 80093f0:	bf00      	nop
  }
}
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009408:	e005      	b.n	8009416 <USBD_GetLen+0x1e>
  {
    len++;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	3301      	adds	r3, #1
 800940e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3301      	adds	r3, #1
 8009414:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1f5      	bne.n	800940a <USBD_GetLen+0x12>
  }

  return len;
 800941e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2202      	movs	r2, #2
 800943c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	2100      	movs	r1, #0
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 fd4e 	bl	8009ef4 <USBD_LL_Transmit>

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	2100      	movs	r1, #0
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fd3d 	bl	8009ef4 <USBD_LL_Transmit>

  return USBD_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2203      	movs	r2, #3
 8009494:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	2100      	movs	r1, #0
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fd58 	bl	8009f64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3710      	adds	r7, #16
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b084      	sub	sp, #16
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	2100      	movs	r1, #0
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fd47 	bl	8009f64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2204      	movs	r2, #4
 80094ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094f0:	2300      	movs	r3, #0
 80094f2:	2200      	movs	r2, #0
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fcfc 	bl	8009ef4 <USBD_LL_Transmit>

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b082      	sub	sp, #8
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2205      	movs	r2, #5
 8009512:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009516:	2300      	movs	r3, #0
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fd21 	bl	8009f64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009530:	2200      	movs	r2, #0
 8009532:	4912      	ldr	r1, [pc, #72]	; (800957c <MX_USB_DEVICE_Init+0x50>)
 8009534:	4812      	ldr	r0, [pc, #72]	; (8009580 <MX_USB_DEVICE_Init+0x54>)
 8009536:	f7fe fd5d 	bl	8007ff4 <USBD_Init>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009540:	f7f7 f908 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009544:	490f      	ldr	r1, [pc, #60]	; (8009584 <MX_USB_DEVICE_Init+0x58>)
 8009546:	480e      	ldr	r0, [pc, #56]	; (8009580 <MX_USB_DEVICE_Init+0x54>)
 8009548:	f7fe fd84 	bl	8008054 <USBD_RegisterClass>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009552:	f7f7 f8ff 	bl	8000754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009556:	490c      	ldr	r1, [pc, #48]	; (8009588 <MX_USB_DEVICE_Init+0x5c>)
 8009558:	4809      	ldr	r0, [pc, #36]	; (8009580 <MX_USB_DEVICE_Init+0x54>)
 800955a:	f7fe fc7b 	bl	8007e54 <USBD_CDC_RegisterInterface>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009564:	f7f7 f8f6 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009568:	4805      	ldr	r0, [pc, #20]	; (8009580 <MX_USB_DEVICE_Init+0x54>)
 800956a:	f7fe fda9 	bl	80080c0 <USBD_Start>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009574:	f7f7 f8ee 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */


  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009578:	bf00      	nop
 800957a:	bd80      	pop	{r7, pc}
 800957c:	200000ac 	.word	0x200000ac
 8009580:	20000d6c 	.word	0x20000d6c
 8009584:	20000018 	.word	0x20000018
 8009588:	20000098 	.word	0x20000098

0800958c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009590:	2200      	movs	r2, #0
 8009592:	4905      	ldr	r1, [pc, #20]	; (80095a8 <CDC_Init_FS+0x1c>)
 8009594:	4805      	ldr	r0, [pc, #20]	; (80095ac <CDC_Init_FS+0x20>)
 8009596:	f7fe fc77 	bl	8007e88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800959a:	4905      	ldr	r1, [pc, #20]	; (80095b0 <CDC_Init_FS+0x24>)
 800959c:	4803      	ldr	r0, [pc, #12]	; (80095ac <CDC_Init_FS+0x20>)
 800959e:	f7fe fc95 	bl	8007ecc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	20001408 	.word	0x20001408
 80095ac:	20000d6c 	.word	0x20000d6c
 80095b0:	20001048 	.word	0x20001048

080095b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	71fb      	strb	r3, [r7, #7]
 80095d0:	4613      	mov	r3, r2
 80095d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b23      	cmp	r3, #35	; 0x23
 80095d8:	d84a      	bhi.n	8009670 <CDC_Control_FS+0xac>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <CDC_Control_FS+0x1c>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	08009671 	.word	0x08009671
 80095e4:	08009671 	.word	0x08009671
 80095e8:	08009671 	.word	0x08009671
 80095ec:	08009671 	.word	0x08009671
 80095f0:	08009671 	.word	0x08009671
 80095f4:	08009671 	.word	0x08009671
 80095f8:	08009671 	.word	0x08009671
 80095fc:	08009671 	.word	0x08009671
 8009600:	08009671 	.word	0x08009671
 8009604:	08009671 	.word	0x08009671
 8009608:	08009671 	.word	0x08009671
 800960c:	08009671 	.word	0x08009671
 8009610:	08009671 	.word	0x08009671
 8009614:	08009671 	.word	0x08009671
 8009618:	08009671 	.word	0x08009671
 800961c:	08009671 	.word	0x08009671
 8009620:	08009671 	.word	0x08009671
 8009624:	08009671 	.word	0x08009671
 8009628:	08009671 	.word	0x08009671
 800962c:	08009671 	.word	0x08009671
 8009630:	08009671 	.word	0x08009671
 8009634:	08009671 	.word	0x08009671
 8009638:	08009671 	.word	0x08009671
 800963c:	08009671 	.word	0x08009671
 8009640:	08009671 	.word	0x08009671
 8009644:	08009671 	.word	0x08009671
 8009648:	08009671 	.word	0x08009671
 800964c:	08009671 	.word	0x08009671
 8009650:	08009671 	.word	0x08009671
 8009654:	08009671 	.word	0x08009671
 8009658:	08009671 	.word	0x08009671
 800965c:	08009671 	.word	0x08009671
 8009660:	08009671 	.word	0x08009671
 8009664:	08009671 	.word	0x08009671
 8009668:	08009671 	.word	0x08009671
 800966c:	08009671 	.word	0x08009671
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009670:	bf00      	nop
  }

  return (USBD_OK);
 8009672:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009674:	4618      	mov	r0, r3
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	4805      	ldr	r0, [pc, #20]	; (80096a4 <CDC_Receive_FS+0x24>)
 800968e:	f7fe fc1d 	bl	8007ecc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009692:	4804      	ldr	r0, [pc, #16]	; (80096a4 <CDC_Receive_FS+0x24>)
 8009694:	f7fe fc78 	bl	8007f88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009698:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20000d6c 	.word	0x20000d6c

080096a8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096b8:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <CDC_Transmit_FS+0x48>)
 80096ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096be:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e00b      	b.n	80096e6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096ce:	887b      	ldrh	r3, [r7, #2]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6879      	ldr	r1, [r7, #4]
 80096d4:	4806      	ldr	r0, [pc, #24]	; (80096f0 <CDC_Transmit_FS+0x48>)
 80096d6:	f7fe fbd7 	bl	8007e88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096da:	4805      	ldr	r0, [pc, #20]	; (80096f0 <CDC_Transmit_FS+0x48>)
 80096dc:	f7fe fc14 	bl	8007f08 <USBD_CDC_TransmitPacket>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20000d6c 	.word	0x20000d6c

080096f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800970a:	4618      	mov	r0, r3
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2212      	movs	r2, #18
 8009728:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800972a:	4b03      	ldr	r3, [pc, #12]	; (8009738 <USBD_FS_DeviceDescriptor+0x20>)
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	200000cc 	.word	0x200000cc

0800973c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	6039      	str	r1, [r7, #0]
 8009746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2204      	movs	r2, #4
 800974c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800974e:	4b03      	ldr	r3, [pc, #12]	; (800975c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	200000ec 	.word	0x200000ec

08009760 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d105      	bne.n	800977e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	4907      	ldr	r1, [pc, #28]	; (8009794 <USBD_FS_ProductStrDescriptor+0x34>)
 8009776:	4808      	ldr	r0, [pc, #32]	; (8009798 <USBD_FS_ProductStrDescriptor+0x38>)
 8009778:	f7ff fdec 	bl	8009354 <USBD_GetString>
 800977c:	e004      	b.n	8009788 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	4904      	ldr	r1, [pc, #16]	; (8009794 <USBD_FS_ProductStrDescriptor+0x34>)
 8009782:	4805      	ldr	r0, [pc, #20]	; (8009798 <USBD_FS_ProductStrDescriptor+0x38>)
 8009784:	f7ff fde6 	bl	8009354 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009788:	4b02      	ldr	r3, [pc, #8]	; (8009794 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	200017c8 	.word	0x200017c8
 8009798:	0800a130 	.word	0x0800a130

0800979c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	4904      	ldr	r1, [pc, #16]	; (80097bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097ac:	4804      	ldr	r0, [pc, #16]	; (80097c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097ae:	f7ff fdd1 	bl	8009354 <USBD_GetString>
  return USBD_StrDesc;
 80097b2:	4b02      	ldr	r3, [pc, #8]	; (80097bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200017c8 	.word	0x200017c8
 80097c0:	0800a148 	.word	0x0800a148

080097c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	221a      	movs	r2, #26
 80097d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097d6:	f000 f855 	bl	8009884 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097da:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	200000f0 	.word	0x200000f0

080097e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	6039      	str	r1, [r7, #0]
 80097f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d105      	bne.n	8009806 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4907      	ldr	r1, [pc, #28]	; (800981c <USBD_FS_ConfigStrDescriptor+0x34>)
 80097fe:	4808      	ldr	r0, [pc, #32]	; (8009820 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009800:	f7ff fda8 	bl	8009354 <USBD_GetString>
 8009804:	e004      	b.n	8009810 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4904      	ldr	r1, [pc, #16]	; (800981c <USBD_FS_ConfigStrDescriptor+0x34>)
 800980a:	4805      	ldr	r0, [pc, #20]	; (8009820 <USBD_FS_ConfigStrDescriptor+0x38>)
 800980c:	f7ff fda2 	bl	8009354 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009810:	4b02      	ldr	r3, [pc, #8]	; (800981c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	200017c8 	.word	0x200017c8
 8009820:	0800a15c 	.word	0x0800a15c

08009824 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	6039      	str	r1, [r7, #0]
 800982e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4907      	ldr	r1, [pc, #28]	; (8009858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800983a:	4808      	ldr	r0, [pc, #32]	; (800985c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800983c:	f7ff fd8a 	bl	8009354 <USBD_GetString>
 8009840:	e004      	b.n	800984c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4904      	ldr	r1, [pc, #16]	; (8009858 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009846:	4805      	ldr	r0, [pc, #20]	; (800985c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009848:	f7ff fd84 	bl	8009354 <USBD_GetString>
  }
  return USBD_StrDesc;
 800984c:	4b02      	ldr	r3, [pc, #8]	; (8009858 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	200017c8 	.word	0x200017c8
 800985c:	0800a168 	.word	0x0800a168

08009860 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	220c      	movs	r2, #12
 8009870:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009872:	4b03      	ldr	r3, [pc, #12]	; (8009880 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	200000e0 	.word	0x200000e0

08009884 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <Get_SerialNum+0x44>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009890:	4b0e      	ldr	r3, [pc, #56]	; (80098cc <Get_SerialNum+0x48>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009896:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <Get_SerialNum+0x4c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4413      	add	r3, r2
 80098a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d009      	beq.n	80098be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098aa:	2208      	movs	r2, #8
 80098ac:	4909      	ldr	r1, [pc, #36]	; (80098d4 <Get_SerialNum+0x50>)
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 f814 	bl	80098dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098b4:	2204      	movs	r2, #4
 80098b6:	4908      	ldr	r1, [pc, #32]	; (80098d8 <Get_SerialNum+0x54>)
 80098b8:	68b8      	ldr	r0, [r7, #8]
 80098ba:	f000 f80f 	bl	80098dc <IntToUnicode>
  }
}
 80098be:	bf00      	nop
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	1fff7590 	.word	0x1fff7590
 80098cc:	1fff7594 	.word	0x1fff7594
 80098d0:	1fff7598 	.word	0x1fff7598
 80098d4:	200000f2 	.word	0x200000f2
 80098d8:	20000102 	.word	0x20000102

080098dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098dc:	b480      	push	{r7}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098ee:	2300      	movs	r3, #0
 80098f0:	75fb      	strb	r3, [r7, #23]
 80098f2:	e027      	b.n	8009944 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	0f1b      	lsrs	r3, r3, #28
 80098f8:	2b09      	cmp	r3, #9
 80098fa:	d80b      	bhi.n	8009914 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	0f1b      	lsrs	r3, r3, #28
 8009900:	b2da      	uxtb	r2, r3
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	4619      	mov	r1, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	440b      	add	r3, r1
 800990c:	3230      	adds	r2, #48	; 0x30
 800990e:	b2d2      	uxtb	r2, r2
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	e00a      	b.n	800992a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	0f1b      	lsrs	r3, r3, #28
 8009918:	b2da      	uxtb	r2, r3
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4619      	mov	r1, r3
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	440b      	add	r3, r1
 8009924:	3237      	adds	r2, #55	; 0x37
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	3301      	adds	r3, #1
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	4413      	add	r3, r2
 800993a:	2200      	movs	r2, #0
 800993c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	3301      	adds	r3, #1
 8009942:	75fb      	strb	r3, [r7, #23]
 8009944:	7dfa      	ldrb	r2, [r7, #23]
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	429a      	cmp	r2, r3
 800994a:	d3d3      	bcc.n	80098f4 <IntToUnicode+0x18>
  }
}
 800994c:	bf00      	nop
 800994e:	bf00      	nop
 8009950:	371c      	adds	r7, #28
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
	...

0800995c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b098      	sub	sp, #96	; 0x60
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009964:	f107 030c 	add.w	r3, r7, #12
 8009968:	2254      	movs	r2, #84	; 0x54
 800996a:	2100      	movs	r1, #0
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fb99 	bl	800a0a4 <memset>
  if(pcdHandle->Instance==USB)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a1d      	ldr	r2, [pc, #116]	; (80099ec <HAL_PCD_MspInit+0x90>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d132      	bne.n	80099e2 <HAL_PCD_MspInit+0x86>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800997c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009980:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8009982:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009986:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009988:	2301      	movs	r3, #1
 800998a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800998c:	2301      	movs	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8009990:	2318      	movs	r3, #24
 8009992:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009994:	2307      	movs	r3, #7
 8009996:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009998:	2302      	movs	r3, #2
 800999a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800999c:	2302      	movs	r3, #2
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80099a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80099a4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fb f9a8 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <HAL_PCD_MspInit+0x5e>
    {
      Error_Handler();
 80099b6:	f7f6 fecd 	bl	8000754 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099ba:	4b0d      	ldr	r3, [pc, #52]	; (80099f0 <HAL_PCD_MspInit+0x94>)
 80099bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099be:	4a0c      	ldr	r2, [pc, #48]	; (80099f0 <HAL_PCD_MspInit+0x94>)
 80099c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099c4:	6593      	str	r3, [r2, #88]	; 0x58
 80099c6:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <HAL_PCD_MspInit+0x94>)
 80099c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099ce:	60bb      	str	r3, [r7, #8]
 80099d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80099d2:	2200      	movs	r2, #0
 80099d4:	2100      	movs	r1, #0
 80099d6:	2043      	movs	r0, #67	; 0x43
 80099d8:	f7f8 fa03 	bl	8001de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80099dc:	2043      	movs	r0, #67	; 0x43
 80099de:	f7f8 fa1c 	bl	8001e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099e2:	bf00      	nop
 80099e4:	3760      	adds	r7, #96	; 0x60
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	40006800 	.word	0x40006800
 80099f0:	40021000 	.word	0x40021000

080099f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 22dc 	ldr.w	r2, [r3, #732]	; 0x2dc
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fe fba5 	bl	800815a <USBD_LL_SetupStage>
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 02dc 	ldr.w	r0, [r3, #732]	; 0x2dc
 8009a2a:	78fa      	ldrb	r2, [r7, #3]
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	00db      	lsls	r3, r3, #3
 8009a36:	440b      	add	r3, r1
 8009a38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	4619      	mov	r1, r3
 8009a42:	f7fe fbdf 	bl	8008204 <USBD_LL_DataOutStage>
}
 8009a46:	bf00      	nop
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8d3 02dc 	ldr.w	r0, [r3, #732]	; 0x2dc
 8009a60:	78fa      	ldrb	r2, [r7, #3]
 8009a62:	6879      	ldr	r1, [r7, #4]
 8009a64:	4613      	mov	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	440b      	add	r3, r1
 8009a6e:	3324      	adds	r3, #36	; 0x24
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	78fb      	ldrb	r3, [r7, #3]
 8009a74:	4619      	mov	r1, r3
 8009a76:	f7fe fc78 	bl	800836a <USBD_LL_DataInStage>
}
 8009a7a:	bf00      	nop
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b082      	sub	sp, #8
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7fe fdb2 	bl	80085fa <USBD_LL_SOF>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	799b      	ldrb	r3, [r3, #6]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d001      	beq.n	8009ab6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ab2:	f7f6 fe4f 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8009abc:	7bfa      	ldrb	r2, [r7, #15]
 8009abe:	4611      	mov	r1, r2
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe fd56 	bl	8008572 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe fcfe 	bl	80084ce <USBD_LL_Reset>
}
 8009ad2:	bf00      	nop
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7fe fd51 	bl	8008592 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	7a9b      	ldrb	r3, [r3, #10]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009af8:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <HAL_PCD_SuspendCallback+0x30>)
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	4a03      	ldr	r2, [pc, #12]	; (8009b0c <HAL_PCD_SuspendCallback+0x30>)
 8009afe:	f043 0306 	orr.w	r3, r3, #6
 8009b02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	e000ed00 	.word	0xe000ed00

08009b10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7a9b      	ldrb	r3, [r3, #10]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b20:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <HAL_PCD_ResumeCallback+0x34>)
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	4a07      	ldr	r2, [pc, #28]	; (8009b44 <HAL_PCD_ResumeCallback+0x34>)
 8009b26:	f023 0306 	bic.w	r3, r3, #6
 8009b2a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009b2c:	f000 fab4 	bl	800a098 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe fd47 	bl	80085ca <USBD_LL_Resume>
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed00 	.word	0xe000ed00

08009b48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009b50:	f7fa fac6 	bl	80040e0 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b54:	4a2b      	ldr	r2, [pc, #172]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8c2 32dc 	str.w	r3, [r2, #732]	; 0x2dc
  pdev->pData = &hpcd_USB_FS;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a29      	ldr	r2, [pc, #164]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b60:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 8009b64:	4b27      	ldr	r3, [pc, #156]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b66:	4a28      	ldr	r2, [pc, #160]	; (8009c08 <USBD_LL_Init+0xc0>)
 8009b68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b6a:	4b26      	ldr	r3, [pc, #152]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b6c:	2208      	movs	r2, #8
 8009b6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b70:	4b24      	ldr	r3, [pc, #144]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b72:	2202      	movs	r2, #2
 8009b74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b76:	4b23      	ldr	r3, [pc, #140]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b78:	2202      	movs	r2, #2
 8009b7a:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009b7c:	4b21      	ldr	r3, [pc, #132]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b82:	4b20      	ldr	r3, [pc, #128]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009b88:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b8e:	4b1d      	ldr	r3, [pc, #116]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b94:	481b      	ldr	r0, [pc, #108]	; (8009c04 <USBD_LL_Init+0xbc>)
 8009b96:	f7f8 fcef 	bl	8002578 <HAL_PCD_Init>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009ba0:	f7f6 fdd8 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009baa:	2318      	movs	r3, #24
 8009bac:	2200      	movs	r2, #0
 8009bae:	2100      	movs	r1, #0
 8009bb0:	f7fa f9b4 	bl	8003f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bba:	2358      	movs	r3, #88	; 0x58
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2180      	movs	r1, #128	; 0x80
 8009bc0:	f7fa f9ac 	bl	8003f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bca:	23c0      	movs	r3, #192	; 0xc0
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2181      	movs	r1, #129	; 0x81
 8009bd0:	f7fa f9a4 	bl	8003f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bda:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009bde:	2200      	movs	r2, #0
 8009be0:	2101      	movs	r1, #1
 8009be2:	f7fa f99b 	bl	8003f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2182      	movs	r1, #130	; 0x82
 8009bf4:	f7fa f992 	bl	8003f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	200019c8 	.word	0x200019c8
 8009c08:	40006800 	.word	0x40006800

08009c0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7f8 fda5 	bl	8002772 <HAL_PCD_Start>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d816      	bhi.n	8009c60 <USBD_LL_Start+0x54>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <USBD_LL_Start+0x2c>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c49 	.word	0x08009c49
 8009c3c:	08009c4f 	.word	0x08009c4f
 8009c40:	08009c55 	.word	0x08009c55
 8009c44:	08009c5b 	.word	0x08009c5b
    case HAL_OK :
      usb_status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c4c:	e00b      	b.n	8009c66 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	73fb      	strb	r3, [r7, #15]
    break;
 8009c52:	e008      	b.n	8009c66 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c54:	2301      	movs	r3, #1
 8009c56:	73fb      	strb	r3, [r7, #15]
    break;
 8009c58:	e005      	b.n	8009c66 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c5e:	e002      	b.n	8009c66 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009c60:	2303      	movs	r3, #3
 8009c62:	73fb      	strb	r3, [r7, #15]
    break;
 8009c64:	bf00      	nop
  }
  return usb_status;
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	4608      	mov	r0, r1
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4603      	mov	r3, r0
 8009c80:	70fb      	strb	r3, [r7, #3]
 8009c82:	460b      	mov	r3, r1
 8009c84:	70bb      	strb	r3, [r7, #2]
 8009c86:	4613      	mov	r3, r2
 8009c88:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009c98:	78bb      	ldrb	r3, [r7, #2]
 8009c9a:	883a      	ldrh	r2, [r7, #0]
 8009c9c:	78f9      	ldrb	r1, [r7, #3]
 8009c9e:	f7f8 fed5 	bl	8002a4c <HAL_PCD_EP_Open>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d817      	bhi.n	8009cdc <USBD_LL_OpenEP+0x6c>
 8009cac:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <USBD_LL_OpenEP+0x44>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009cc5 	.word	0x08009cc5
 8009cb8:	08009ccb 	.word	0x08009ccb
 8009cbc:	08009cd1 	.word	0x08009cd1
 8009cc0:	08009cd7 	.word	0x08009cd7
    case HAL_OK :
      usb_status = USBD_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc8:	e00b      	b.n	8009ce2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8009cce:	e008      	b.n	8009ce2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cd4:	e005      	b.n	8009ce2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cda:	e002      	b.n	8009ce2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	73fb      	strb	r3, [r7, #15]
    break;
 8009ce0:	bf00      	nop
  }
  return usb_status;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d06:	78fa      	ldrb	r2, [r7, #3]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7f8 fefd 	bl	8002b0a <HAL_PCD_EP_Close>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d816      	bhi.n	8009d48 <USBD_LL_CloseEP+0x5c>
 8009d1a:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <USBD_LL_CloseEP+0x34>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d31 	.word	0x08009d31
 8009d24:	08009d37 	.word	0x08009d37
 8009d28:	08009d3d 	.word	0x08009d3d
 8009d2c:	08009d43 	.word	0x08009d43
    case HAL_OK :
      usb_status = USBD_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
    break;
 8009d34:	e00b      	b.n	8009d4e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d36:	2303      	movs	r3, #3
 8009d38:	73fb      	strb	r3, [r7, #15]
    break;
 8009d3a:	e008      	b.n	8009d4e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d40:	e005      	b.n	8009d4e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d42:	2303      	movs	r3, #3
 8009d44:	73fb      	strb	r3, [r7, #15]
    break;
 8009d46:	e002      	b.n	8009d4e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4c:	bf00      	nop
  }
  return usb_status;
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d72:	78fa      	ldrb	r2, [r7, #3]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f8 ff8f 	bl	8002c9a <HAL_PCD_EP_SetStall>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d816      	bhi.n	8009db4 <USBD_LL_StallEP+0x5c>
 8009d86:	a201      	add	r2, pc, #4	; (adr r2, 8009d8c <USBD_LL_StallEP+0x34>)
 8009d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009da3 	.word	0x08009da3
 8009d94:	08009da9 	.word	0x08009da9
 8009d98:	08009daf 	.word	0x08009daf
    case HAL_OK :
      usb_status = USBD_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009da0:	e00b      	b.n	8009dba <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009da2:	2303      	movs	r3, #3
 8009da4:	73fb      	strb	r3, [r7, #15]
    break;
 8009da6:	e008      	b.n	8009dba <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009da8:	2301      	movs	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
    break;
 8009dac:	e005      	b.n	8009dba <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dae:	2303      	movs	r3, #3
 8009db0:	73fb      	strb	r3, [r7, #15]
    break;
 8009db2:	e002      	b.n	8009dba <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	73fb      	strb	r3, [r7, #15]
    break;
 8009db8:	bf00      	nop
  }
  return usb_status;
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dde:	78fa      	ldrb	r2, [r7, #3]
 8009de0:	4611      	mov	r1, r2
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7f8 ffb9 	bl	8002d5a <HAL_PCD_EP_ClrStall>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d816      	bhi.n	8009e20 <USBD_LL_ClearStallEP+0x5c>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_LL_ClearStallEP+0x34>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e09 	.word	0x08009e09
 8009dfc:	08009e0f 	.word	0x08009e0f
 8009e00:	08009e15 	.word	0x08009e15
 8009e04:	08009e1b 	.word	0x08009e1b
    case HAL_OK :
      usb_status = USBD_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e0c:	e00b      	b.n	8009e26 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	73fb      	strb	r3, [r7, #15]
    break;
 8009e12:	e008      	b.n	8009e26 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e14:	2301      	movs	r3, #1
 8009e16:	73fb      	strb	r3, [r7, #15]
    break;
 8009e18:	e005      	b.n	8009e26 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1e:	e002      	b.n	8009e26 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009e20:	2303      	movs	r3, #3
 8009e22:	73fb      	strb	r3, [r7, #15]
    break;
 8009e24:	bf00      	nop
  }
  return usb_status;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	da0b      	bge.n	8009e64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e52:	68f9      	ldr	r1, [r7, #12]
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	440b      	add	r3, r1
 8009e5e:	3312      	adds	r3, #18
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	e00b      	b.n	8009e7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e64:	78fb      	ldrb	r3, [r7, #3]
 8009e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e6a:	68f9      	ldr	r1, [r7, #12]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	440b      	add	r3, r1
 8009e76:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8009e7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	460b      	mov	r3, r1
 8009e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ea2:	78fa      	ldrb	r2, [r7, #3]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7f8 fdac 	bl	8002a04 <HAL_PCD_SetAddress>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d816      	bhi.n	8009ee4 <USBD_LL_SetUSBAddress+0x5c>
 8009eb6:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <USBD_LL_SetUSBAddress+0x34>)
 8009eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebc:	08009ecd 	.word	0x08009ecd
 8009ec0:	08009ed3 	.word	0x08009ed3
 8009ec4:	08009ed9 	.word	0x08009ed9
 8009ec8:	08009edf 	.word	0x08009edf
    case HAL_OK :
      usb_status = USBD_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed0:	e00b      	b.n	8009eea <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ed6:	e008      	b.n	8009eea <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	73fb      	strb	r3, [r7, #15]
    break;
 8009edc:	e005      	b.n	8009eea <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee2:	e002      	b.n	8009eea <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ee8:	bf00      	nop
  }
  return usb_status;
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	607a      	str	r2, [r7, #4]
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	460b      	mov	r3, r1
 8009f02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f12:	7af9      	ldrb	r1, [r7, #11]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	f7f8 fe88 	bl	8002c2c <HAL_PCD_EP_Transmit>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009f20:	7dbb      	ldrb	r3, [r7, #22]
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	d816      	bhi.n	8009f54 <USBD_LL_Transmit+0x60>
 8009f26:	a201      	add	r2, pc, #4	; (adr r2, 8009f2c <USBD_LL_Transmit+0x38>)
 8009f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2c:	08009f3d 	.word	0x08009f3d
 8009f30:	08009f43 	.word	0x08009f43
 8009f34:	08009f49 	.word	0x08009f49
 8009f38:	08009f4f 	.word	0x08009f4f
    case HAL_OK :
      usb_status = USBD_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	75fb      	strb	r3, [r7, #23]
    break;
 8009f40:	e00b      	b.n	8009f5a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f42:	2303      	movs	r3, #3
 8009f44:	75fb      	strb	r3, [r7, #23]
    break;
 8009f46:	e008      	b.n	8009f5a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	75fb      	strb	r3, [r7, #23]
    break;
 8009f4c:	e005      	b.n	8009f5a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	75fb      	strb	r3, [r7, #23]
    break;
 8009f52:	e002      	b.n	8009f5a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009f54:	2303      	movs	r3, #3
 8009f56:	75fb      	strb	r3, [r7, #23]
    break;
 8009f58:	bf00      	nop
  }
  return usb_status;
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	607a      	str	r2, [r7, #4]
 8009f6e:	603b      	str	r3, [r7, #0]
 8009f70:	460b      	mov	r3, r1
 8009f72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009f82:	7af9      	ldrb	r1, [r7, #11]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	f7f8 fe07 	bl	8002b9a <HAL_PCD_EP_Receive>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009f90:	7dbb      	ldrb	r3, [r7, #22]
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d816      	bhi.n	8009fc4 <USBD_LL_PrepareReceive+0x60>
 8009f96:	a201      	add	r2, pc, #4	; (adr r2, 8009f9c <USBD_LL_PrepareReceive+0x38>)
 8009f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9c:	08009fad 	.word	0x08009fad
 8009fa0:	08009fb3 	.word	0x08009fb3
 8009fa4:	08009fb9 	.word	0x08009fb9
 8009fa8:	08009fbf 	.word	0x08009fbf
    case HAL_OK :
      usb_status = USBD_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	75fb      	strb	r3, [r7, #23]
    break;
 8009fb0:	e00b      	b.n	8009fca <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	75fb      	strb	r3, [r7, #23]
    break;
 8009fb6:	e008      	b.n	8009fca <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	75fb      	strb	r3, [r7, #23]
    break;
 8009fbc:	e005      	b.n	8009fca <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	75fb      	strb	r3, [r7, #23]
    break;
 8009fc2:	e002      	b.n	8009fca <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	75fb      	strb	r3, [r7, #23]
    break;
 8009fc8:	bf00      	nop
  }
  return usb_status;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fe6:	78fa      	ldrb	r2, [r7, #3]
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7f8 fe06 	bl	8002bfc <HAL_PCD_EP_GetRxCount>
 8009ff0:	4603      	mov	r3, r0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a008:	78fb      	ldrb	r3, [r7, #3]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <HAL_PCDEx_LPM_Callback+0x18>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d013      	beq.n	800a03a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a012:	e023      	b.n	800a05c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	7a9b      	ldrb	r3, [r3, #10]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d007      	beq.n	800a02c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a01c:	f000 f83c 	bl	800a098 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a020:	4b10      	ldr	r3, [pc, #64]	; (800a064 <HAL_PCDEx_LPM_Callback+0x68>)
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	4a0f      	ldr	r2, [pc, #60]	; (800a064 <HAL_PCDEx_LPM_Callback+0x68>)
 800a026:	f023 0306 	bic.w	r3, r3, #6
 800a02a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fac9 	bl	80085ca <USBD_LL_Resume>
    break;
 800a038:	e010      	b.n	800a05c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800a040:	4618      	mov	r0, r3
 800a042:	f7fe faa6 	bl	8008592 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7a9b      	ldrb	r3, [r3, #10]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d005      	beq.n	800a05a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a04e:	4b05      	ldr	r3, [pc, #20]	; (800a064 <HAL_PCDEx_LPM_Callback+0x68>)
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	4a04      	ldr	r2, [pc, #16]	; (800a064 <HAL_PCDEx_LPM_Callback+0x68>)
 800a054:	f043 0306 	orr.w	r3, r3, #6
 800a058:	6113      	str	r3, [r2, #16]
    break;
 800a05a:	bf00      	nop
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	e000ed00 	.word	0xe000ed00

0800a068 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a070:	4b03      	ldr	r3, [pc, #12]	; (800a080 <USBD_static_malloc+0x18>)
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	20001ca8 	.word	0x20001ca8

0800a084 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a09c:	f7f6 f8ea 	bl	8000274 <SystemClock_Config>
}
 800a0a0:	bf00      	nop
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <memset>:
 800a0a4:	4402      	add	r2, r0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d100      	bne.n	800a0ae <memset+0xa>
 800a0ac:	4770      	bx	lr
 800a0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b2:	e7f9      	b.n	800a0a8 <memset+0x4>

0800a0b4 <__libc_init_array>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	4d0d      	ldr	r5, [pc, #52]	; (800a0ec <__libc_init_array+0x38>)
 800a0b8:	4c0d      	ldr	r4, [pc, #52]	; (800a0f0 <__libc_init_array+0x3c>)
 800a0ba:	1b64      	subs	r4, r4, r5
 800a0bc:	10a4      	asrs	r4, r4, #2
 800a0be:	2600      	movs	r6, #0
 800a0c0:	42a6      	cmp	r6, r4
 800a0c2:	d109      	bne.n	800a0d8 <__libc_init_array+0x24>
 800a0c4:	4d0b      	ldr	r5, [pc, #44]	; (800a0f4 <__libc_init_array+0x40>)
 800a0c6:	4c0c      	ldr	r4, [pc, #48]	; (800a0f8 <__libc_init_array+0x44>)
 800a0c8:	f000 f826 	bl	800a118 <_init>
 800a0cc:	1b64      	subs	r4, r4, r5
 800a0ce:	10a4      	asrs	r4, r4, #2
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	42a6      	cmp	r6, r4
 800a0d4:	d105      	bne.n	800a0e2 <__libc_init_array+0x2e>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0dc:	4798      	blx	r3
 800a0de:	3601      	adds	r6, #1
 800a0e0:	e7ee      	b.n	800a0c0 <__libc_init_array+0xc>
 800a0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e6:	4798      	blx	r3
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	e7f2      	b.n	800a0d2 <__libc_init_array+0x1e>
 800a0ec:	0800a1b8 	.word	0x0800a1b8
 800a0f0:	0800a1b8 	.word	0x0800a1b8
 800a0f4:	0800a1b8 	.word	0x0800a1b8
 800a0f8:	0800a1bc 	.word	0x0800a1bc

0800a0fc <memcpy>:
 800a0fc:	440a      	add	r2, r1
 800a0fe:	4291      	cmp	r1, r2
 800a100:	f100 33ff 	add.w	r3, r0, #4294967295
 800a104:	d100      	bne.n	800a108 <memcpy+0xc>
 800a106:	4770      	bx	lr
 800a108:	b510      	push	{r4, lr}
 800a10a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a112:	4291      	cmp	r1, r2
 800a114:	d1f9      	bne.n	800a10a <memcpy+0xe>
 800a116:	bd10      	pop	{r4, pc}

0800a118 <_init>:
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	bf00      	nop
 800a11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11e:	bc08      	pop	{r3}
 800a120:	469e      	mov	lr, r3
 800a122:	4770      	bx	lr

0800a124 <_fini>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr
